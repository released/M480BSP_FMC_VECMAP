; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\obj\fmc.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\obj\fmc.d --cpu=Cortex-M4.fp --apcs=interwork --diag_suppress=9931 -I..\..\..\Library\CMSIS\Include -I..\..\..\Library\Device\Nuvoton\M480\Include -I..\..\..\Library\StdDriver\inc -I..\..\Template -IC:\Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=528 --omf_browse=.\obj\fmc.crf ..\..\..\Library\StdDriver\src\fmc.c]
                          THUMB

                          AREA ||i.FMC_CheckAllOne||, CODE, READONLY, ALIGN=2

                  FMC_CheckAllOne PROC
;;;1098     */
;;;1099   uint32_t  FMC_CheckAllOne(uint32_t u32addr, uint32_t u32count)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1100   {
;;;1101       int32_t  tout;
;;;1102   
;;;1103       g_FMC_i32ErrCode = 0;
000002  4b1d              LDR      r3,|L1.120|
000004  2200              MOVS     r2,#0
;;;1104   
;;;1105       FMC->ISPSTS = 0x80UL;   /* clear check all one bit */
000006  4c1d              LDR      r4,|L1.124|
000008  601a              STR      r2,[r3,#0]  ; g_FMC_i32ErrCode
00000a  2280              MOVS     r2,#0x80
00000c  6422              STR      r2,[r4,#0x40]
;;;1106   
;;;1107       FMC->ISPCMD   = FMC_ISPCMD_RUN_ALL1;
00000e  2228              MOVS     r2,#0x28
000010  60e2              STR      r2,[r4,#0xc]
;;;1108       FMC->ISPADDR  = u32addr;
000012  6060              STR      r0,[r4,#4]
;;;1109       FMC->ISPDAT   = u32count;
000014  60a1              STR      r1,[r4,#8]
;;;1110       FMC->ISPTRG   = FMC_ISPTRG_ISPGO_Msk;
000016  2601              MOVS     r6,#1
000018  6126              STR      r6,[r4,#0x10]
;;;1111   
;;;1112       tout = FMC_TIMEOUT_CHKALLONE;
00001a  4919              LDR      r1,|L1.128|
00001c  6809              LDR      r1,[r1,#0]  ; SystemCoreClock
00001e  0049              LSLS     r1,r1,#1
000020  460a              MOV      r2,r1
                  |L1.34|
;;;1113       while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000022  1e15              SUBS     r5,r2,#0
000024  f1a20201          SUB      r2,r2,#1
000028  dd03              BLE      |L1.50|
00002a  f8d450c0          LDR      r5,[r4,#0xc0]
00002e  07ed              LSLS     r5,r5,#31
000030  d1f7              BNE      |L1.34|
                  |L1.50|
;;;1114       if (tout <= 0)
;;;1115       {
;;;1116           g_FMC_i32ErrCode = -1;
000032  f04f35ff          MOV      r5,#0xffffffff
000036  2a00              CMP      r2,#0                 ;1114
000038  dd1a              BLE      |L1.112|
;;;1117           return READ_ALLONE_CMD_FAIL;
;;;1118       }
;;;1119   
;;;1120       tout = FMC_TIMEOUT_CHKALLONE;
;;;1121       do
;;;1122       {
;;;1123           FMC->ISPCMD = FMC_ISPCMD_READ_ALL1;
00003a  2708              MOVS     r7,#8
                  |L1.60|
00003c  60e7              STR      r7,[r4,#0xc]
;;;1124           FMC->ISPADDR    = u32addr;
00003e  6060              STR      r0,[r4,#4]
;;;1125           FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000040  6126              STR      r6,[r4,#0x10]
                  |L1.66|
;;;1126           while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000042  1e0a              SUBS     r2,r1,#0
000044  f1a10101          SUB      r1,r1,#1
000048  dd03              BLE      |L1.82|
00004a  f8d420c0          LDR      r2,[r4,#0xc0]
00004e  07d2              LSLS     r2,r2,#31
000050  d1f7              BNE      |L1.66|
                  |L1.82|
;;;1127           if (tout <= 0)
000052  2900              CMP      r1,#0
000054  dd0c              BLE      |L1.112|
;;;1128           {
;;;1129               g_FMC_i32ErrCode = -1;
;;;1130               return READ_ALLONE_CMD_FAIL;
;;;1131           }
;;;1132       }
;;;1133       while (FMC->ISPDAT == 0UL);
000056  68a2              LDR      r2,[r4,#8]
000058  2a00              CMP      r2,#0
00005a  d0ef              BEQ      |L1.60|
;;;1134   
;;;1135       if ((FMC->ISPDAT == READ_ALLONE_YES) || (FMC->ISPDAT == READ_ALLONE_NOT))
00005c  68a0              LDR      r0,[r4,#8]
00005e  4909              LDR      r1,|L1.132|
000060  4288              CMP      r0,r1
000062  d003              BEQ      |L1.108|
000064  68a0              LDR      r0,[r4,#8]
000066  4908              LDR      r1,|L1.136|
000068  4288              CMP      r0,r1
00006a  d101              BNE      |L1.112|
                  |L1.108|
;;;1136           return FMC->ISPDAT;
00006c  68a0              LDR      r0,[r4,#8]
;;;1137       else
;;;1138       {
;;;1139           g_FMC_i32ErrCode = -1;
;;;1140           return READ_ALLONE_CMD_FAIL;
;;;1141       }
;;;1142   }
00006e  bdf0              POP      {r4-r7,pc}
                  |L1.112|
000070  4628              MOV      r0,r5                 ;1139
000072  601d              STR      r5,[r3,#0]            ;1139  ; g_FMC_i32ErrCode
000074  bdf0              POP      {r4-r7,pc}
;;;1143   
                          ENDP

000076  0000              DCW      0x0000
                  |L1.120|
                          DCD      ||.data||
                  |L1.124|
                          DCD      0x4000c000
                  |L1.128|
                          DCD      SystemCoreClock
                  |L1.132|
                          DCD      0xa11fffff
                  |L1.136|
                          DCD      0xa1100000

                          AREA ||i.FMC_Close||, CODE, READONLY, ALIGN=2

                  FMC_Close PROC
;;;34       */
;;;35     void FMC_Close(void)
000000  4802              LDR      r0,|L2.12|
;;;36     {
;;;37         FMC->ISPCTL &= ~FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0210101          BIC      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;38     }
00000a  4770              BX       lr
;;;39     
                          ENDP

                  |L2.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_CompareSPKey||, CODE, READONLY, ALIGN=2

                  FMC_CompareSPKey PROC
;;;1264     */
;;;1265   int32_t  FMC_CompareSPKey(uint32_t key[3])
000000  4b1b              LDR      r3,|L3.112|
;;;1266   {
;;;1267       uint32_t  u32KeySts;
;;;1268       int32_t   tout;
;;;1269   
;;;1270       g_FMC_i32ErrCode = 0;
000002  2100              MOVS     r1,#0
;;;1271   
;;;1272       if (FMC->KPKEYSTS & FMC_KPKEYSTS_FORBID_Msk)
000004  6019              STR      r1,[r3,#0]  ; g_FMC_i32ErrCode
000006  491b              LDR      r1,|L3.116|
000008  6e0a              LDR      r2,[r1,#0x60]
00000a  0712              LSLS     r2,r2,#28
00000c  d502              BPL      |L3.20|
;;;1273       {
;;;1274           /* FMC_CompareSPKey - FORBID!  */
;;;1275           g_FMC_i32ErrCode = -2;
00000e  f06f0001          MVN      r0,#1
;;;1276           return -2;
000012  e029              B        |L3.104|
                  |L3.20|
;;;1277       }
;;;1278   
;;;1279       if (!(FMC->KPKEYSTS & FMC_KPKEYSTS_KEYLOCK_Msk))
000014  6e0a              LDR      r2,[r1,#0x60]
000016  0792              LSLS     r2,r2,#30
000018  d402              BMI      |L3.32|
;;;1280       {
;;;1281           /* FMC_CompareSPKey - key is not locked!  */
;;;1282           g_FMC_i32ErrCode = -4;
00001a  f06f0003          MVN      r0,#3
;;;1283           return -4;
00001e  e023              B        |L3.104|
                  |L3.32|
;;;1284       }
;;;1285   
;;;1286       FMC->KPKEY0 = key[0];
000020  6802              LDR      r2,[r0,#0]
000022  650a              STR      r2,[r1,#0x50]
;;;1287       FMC->KPKEY1 = key[1];
000024  6842              LDR      r2,[r0,#4]
000026  654a              STR      r2,[r1,#0x54]
;;;1288       FMC->KPKEY2 = key[2];
000028  6880              LDR      r0,[r0,#8]
00002a  6588              STR      r0,[r1,#0x58]
;;;1289       FMC->KPKEYTRG = FMC_KPKEYTRG_KPKEYGO_Msk | FMC_KPKEYTRG_TCEN_Msk;
00002c  2003              MOVS     r0,#3
00002e  65c8              STR      r0,[r1,#0x5c]
;;;1290   
;;;1291       tout = FMC_TIMEOUT_READ;
000030  4811              LDR      r0,|L3.120|
000032  220a              MOVS     r2,#0xa
000034  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000036  fbb0f0f2          UDIV     r0,r0,r2
00003a  0040              LSLS     r0,r0,#1
                  |L3.60|
;;;1292       while ((tout-- > 0) && (FMC->KPKEYSTS & FMC_KPKEYSTS_KEYBUSY_Msk)) {}
00003c  1e02              SUBS     r2,r0,#0
00003e  f1a00001          SUB      r0,r0,#1
000042  dd02              BLE      |L3.74|
000044  6e0a              LDR      r2,[r1,#0x60]
000046  07d2              LSLS     r2,r2,#31
000048  d1f8              BNE      |L3.60|
                  |L3.74|
;;;1293       if (tout <= 0)
00004a  2800              CMP      r0,#0
00004c  dc02              BGT      |L3.84|
;;;1294       {
;;;1295           g_FMC_i32ErrCode = -1;
00004e  f04f30ff          MOV      r0,#0xffffffff
;;;1296           return -1;
000052  e009              B        |L3.104|
                  |L3.84|
;;;1297       }
;;;1298   
;;;1299       u32KeySts = FMC->KPKEYSTS;
000054  6e08              LDR      r0,[r1,#0x60]
;;;1300   
;;;1301       if (!(u32KeySts & FMC_KPKEYSTS_KEYMATCH_Msk))
000056  0741              LSLS     r1,r0,#29
000058  d402              BMI      |L3.96|
;;;1302       {
;;;1303           /* Key mismatched! */
;;;1304           g_FMC_i32ErrCode = -3;
00005a  f06f0002          MVN      r0,#2
;;;1305           return -3;
00005e  e003              B        |L3.104|
                  |L3.96|
;;;1306       }
;;;1307       else if (u32KeySts & FMC_KPKEYSTS_KEYLOCK_Msk)
000060  0780              LSLS     r0,r0,#30
000062  d503              BPL      |L3.108|
;;;1308       {
;;;1309           /* Key matched, but failed to unlock! */
;;;1310           g_FMC_i32ErrCode = -5;
000064  f06f0004          MVN      r0,#4
                  |L3.104|
000068  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;1311           return -5;
;;;1312       }
;;;1313       return 0;
;;;1314   }
00006a  4770              BX       lr
                  |L3.108|
00006c  2000              MOVS     r0,#0                 ;1313
00006e  4770              BX       lr
;;;1315   
                          ENDP

                  |L3.112|
                          DCD      ||.data||
                  |L3.116|
                          DCD      0x4000c000
                  |L3.120|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_ConfigXOM||, CODE, READONLY, ALIGN=2

                  FMC_ConfigXOM PROC
;;;55       */
;;;56     int32_t FMC_ConfigXOM(uint32_t u32XomNum, uint32_t u32XomBase, uint8_t u8XomPage)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;57     {
;;;58         int32_t   tout;
;;;59         int32_t   ret;
;;;60     
;;;61         g_FMC_i32ErrCode = 0;
000004  4b38              LDR      r3,|L4.232|
000006  f04f0a00          MOV      r10,#0
00000a  4691              MOV      r9,r2                 ;57
00000c  460e              MOV      r6,r1                 ;57
00000e  4604              MOV      r4,r0                 ;57
;;;62     
;;;63         if (u32XomNum >= 4UL)
000010  f8c3a000          STR      r10,[r3,#0]  ; g_FMC_i32ErrCode
000014  2804              CMP      r0,#4
000016  d302              BCC      |L4.30|
;;;64         {
;;;65             g_FMC_i32ErrCode = -2;
000018  f06f0001          MVN      r0,#1
;;;66             return -2;
00001c  e05c              B        |L4.216|
                  |L4.30|
;;;67         }
;;;68     
;;;69         ret = FMC_GetXOMState(u32XomNum);
00001e  4620              MOV      r0,r4
000020  f7fffffe          BL       FMC_GetXOMState
;;;70         if (ret != 0)
000024  2800              CMP      r0,#0
000026  d158              BNE      |L4.218|
;;;71             return ret;
;;;72     
;;;73         FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000028  4d30              LDR      r5,|L4.236|
00002a  2721              MOVS     r7,#0x21
00002c  60ef              STR      r7,[r5,#0xc]
;;;74         FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u);
00002e  f44f1000          MOV      r0,#0x200000
000032  eb001004          ADD      r0,r0,r4,LSL #4
000036  6068              STR      r0,[r5,#4]
;;;75         FMC->ISPDAT = u32XomBase;
000038  60ae              STR      r6,[r5,#8]
;;;76         FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00003a  f04f0c01          MOV      r12,#1
00003e  f8c5c010          STR      r12,[r5,#0x10]
;;;77         tout = FMC_TIMEOUT_WRITE;
000042  482b              LDR      r0,|L4.240|
000044  f04f080a          MOV      r8,#0xa
000048  6801              LDR      r1,[r0,#0]  ; SystemCoreClock
00004a  fbb1f0f8          UDIV     r0,r1,r8
00004e  0042              LSLS     r2,r0,#1
                  |L4.80|
;;;78         while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000050  1e10              SUBS     r0,r2,#0
000052  f1a20201          SUB      r2,r2,#1
000056  dd03              BLE      |L4.96|
000058  f8d500c0          LDR      r0,[r5,#0xc0]
00005c  07c0              LSLS     r0,r0,#31
00005e  d1f7              BNE      |L4.80|
                  |L4.96|
;;;79         if (tout <= 0)
;;;80         {
;;;81             g_FMC_i32ErrCode = -1;
000060  f04f30ff          MOV      r0,#0xffffffff
000064  2a00              CMP      r2,#0                 ;79
000066  dd37              BLE      |L4.216|
;;;82             return -1;
;;;83         }
;;;84     
;;;85         if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
000068  6c2a              LDR      r2,[r5,#0x40]
00006a  0652              LSLS     r2,r2,#25
00006c  d504              BPL      |L4.120|
                  |L4.110|
;;;86         {
;;;87             FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
00006e  6c29              LDR      r1,[r5,#0x40]
000070  f0410140          ORR      r1,r1,#0x40
000074  6429              STR      r1,[r5,#0x40]
;;;88             g_FMC_i32ErrCode = -1;
;;;89             return -1;
000076  e02f              B        |L4.216|
                  |L4.120|
;;;90         }
;;;91     
;;;92         FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000078  60ef              STR      r7,[r5,#0xc]
;;;93         FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u + 0x04u);
00007a  4e1e              LDR      r6,|L4.244|
00007c  eb061604          ADD      r6,r6,r4,LSL #4
000080  606e              STR      r6,[r5,#4]
;;;94         FMC->ISPDAT = u8XomPage;
000082  f8c59008          STR      r9,[r5,#8]
;;;95         FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000086  f8c5c010          STR      r12,[r5,#0x10]
;;;96         tout = FMC_TIMEOUT_WRITE;
00008a  fbb1f2f8          UDIV     r2,r1,r8
00008e  0052              LSLS     r2,r2,#1
                  |L4.144|
;;;97         while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000090  1e16              SUBS     r6,r2,#0
000092  f1a20201          SUB      r2,r2,#1
000096  dd03              BLE      |L4.160|
000098  f8d560c0          LDR      r6,[r5,#0xc0]
00009c  07f6              LSLS     r6,r6,#31
00009e  d1f7              BNE      |L4.144|
                  |L4.160|
;;;98         if (tout <= 0)
0000a0  2a00              CMP      r2,#0
0000a2  dd19              BLE      |L4.216|
;;;99         {
;;;100            g_FMC_i32ErrCode = -1;
;;;101            return -1;
;;;102        }
;;;103    
;;;104        if(FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
0000a4  6c2a              LDR      r2,[r5,#0x40]
0000a6  0652              LSLS     r2,r2,#25
0000a8  d4e1              BMI      |L4.110|
;;;105        {
;;;106            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;107            g_FMC_i32ErrCode = -1;
;;;108            return -1;
;;;109        }
;;;110    
;;;111        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
0000aa  60ef              STR      r7,[r5,#0xc]
;;;112        FMC->ISPADDR = FMC_XOM_BASE + (u32XomNum * 0x10u + 0x08u);
0000ac  4a11              LDR      r2,|L4.244|
0000ae  1d12              ADDS     r2,r2,#4
0000b0  eb021204          ADD      r2,r2,r4,LSL #4
0000b4  606a              STR      r2,[r5,#4]
;;;113        FMC->ISPDAT = 0u;
0000b6  f8c5a008          STR      r10,[r5,#8]
;;;114        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
0000ba  f8c5c010          STR      r12,[r5,#0x10]
;;;115        tout = FMC_TIMEOUT_WRITE;
0000be  fbb1f1f8          UDIV     r1,r1,r8
0000c2  0049              LSLS     r1,r1,#1
                  |L4.196|
;;;116        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
0000c4  1e0a              SUBS     r2,r1,#0
0000c6  f1a10101          SUB      r1,r1,#1
0000ca  dd03              BLE      |L4.212|
0000cc  f8d520c0          LDR      r2,[r5,#0xc0]
0000d0  07d2              LSLS     r2,r2,#31
0000d2  d1f7              BNE      |L4.196|
                  |L4.212|
;;;117        if (tout <= 0)
0000d4  2900              CMP      r1,#0
0000d6  dc02              BGT      |L4.222|
                  |L4.216|
;;;118        {
;;;119            g_FMC_i32ErrCode = -1;
;;;120            return -1;
0000d8  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
                  |L4.218|
;;;121        }
;;;122    
;;;123        if(FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;124        {
;;;125            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;126            g_FMC_i32ErrCode = -1;
;;;127            return -1;
;;;128        }
;;;129        return 0;
;;;130    }
0000da  e8bd87f0          POP      {r4-r10,pc}
                  |L4.222|
0000de  6c29              LDR      r1,[r5,#0x40]         ;123
0000e0  0649              LSLS     r1,r1,#25             ;123
0000e2  d4c4              BMI      |L4.110|
0000e4  2000              MOVS     r0,#0                 ;129
0000e6  e7f8              B        |L4.218|
;;;131    
                          ENDP

                  |L4.232|
                          DCD      ||.data||
                  |L4.236|
                          DCD      0x4000c000
                  |L4.240|
                          DCD      SystemCoreClock
                  |L4.244|
                          DCD      0x00200004

                          AREA ||i.FMC_Erase||, CODE, READONLY, ALIGN=2

                  FMC_Erase PROC
;;;142      */
;;;143    int32_t FMC_Erase(uint32_t u32PageAddr)
000000  4b15              LDR      r3,|L5.88|
;;;144    {
;;;145        int32_t  tout;
;;;146    
;;;147        g_FMC_i32ErrCode = 0;
000002  2100              MOVS     r1,#0
;;;148    
;;;149        if (u32PageAddr == FMC_SPROM_BASE)
000004  f5b01f00          CMP      r0,#0x200000
000008  6019              STR      r1,[r3,#0]  ; g_FMC_i32ErrCode
00000a  d019              BEQ      |L5.64|
;;;150        {
;;;151            return FMC_Erase_SPROM();
;;;152        }
;;;153    
;;;154        FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
00000c  4a13              LDR      r2,|L5.92|
00000e  2122              MOVS     r1,#0x22
000010  60d1              STR      r1,[r2,#0xc]
;;;155        FMC->ISPADDR = u32PageAddr;
000012  6050              STR      r0,[r2,#4]
;;;156        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000014  2001              MOVS     r0,#1
000016  6110              STR      r0,[r2,#0x10]
;;;157    
;;;158        tout = FMC_TIMEOUT_ERASE;
000018  4811              LDR      r0,|L5.96|
00001a  6801              LDR      r1,[r0,#0]  ; SystemCoreClock
00001c  200a              MOVS     r0,#0xa
00001e  fbb1f0f0          UDIV     r0,r1,r0
000022  0081              LSLS     r1,r0,#2
                  |L5.36|
;;;159        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000024  1e08              SUBS     r0,r1,#0
000026  f1a10101          SUB      r1,r1,#1
00002a  dd03              BLE      |L5.52|
00002c  f8d200c0          LDR      r0,[r2,#0xc0]
000030  07c0              LSLS     r0,r0,#31
000032  d1f7              BNE      |L5.36|
                  |L5.52|
;;;160        if (tout <= 0)
;;;161        {
;;;162            g_FMC_i32ErrCode = -1;
000034  f04f30ff          MOV      r0,#0xffffffff
000038  2900              CMP      r1,#0                 ;160
00003a  dc03              BGT      |L5.68|
                  |L5.60|
;;;163            return -1;
00003c  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;164        }
;;;165    
;;;166        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
;;;167        {
;;;168            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
;;;169            g_FMC_i32ErrCode = -1;
;;;170            return -1;
;;;171        }
;;;172        return 0;
;;;173    }
00003e  4770              BX       lr
                  |L5.64|
000040  f7ffbffe          B.W      FMC_Erase_SPROM
                  |L5.68|
000044  6811              LDR      r1,[r2,#0]            ;166
000046  0649              LSLS     r1,r1,#25             ;166
000048  d504              BPL      |L5.84|
00004a  6811              LDR      r1,[r2,#0]            ;168
00004c  f0410140          ORR      r1,r1,#0x40           ;168
000050  6011              STR      r1,[r2,#0]            ;168
000052  e7f3              B        |L5.60|
                  |L5.84|
000054  2000              MOVS     r0,#0                 ;172
000056  4770              BX       lr
;;;174    
                          ENDP

                  |L5.88|
                          DCD      ||.data||
                  |L5.92|
                          DCD      0x4000c000
                  |L5.96|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_EraseXOM||, CODE, READONLY, ALIGN=2

                  FMC_EraseXOM PROC
;;;300      */
;;;301    int32_t FMC_EraseXOM(uint32_t u32XomNum)
000000  b570              PUSH     {r4-r6,lr}
;;;302    {
;;;303        uint32_t  u32Addr;
;;;304        int32_t   i32Active, err = 0;
000002  2300              MOVS     r3,#0
000004  4605              MOV      r5,r0                 ;302
;;;305        int32_t   tout;
;;;306    
;;;307        if(u32XomNum >= 4UL)
000006  2804              CMP      r0,#4
000008  d301              BCC      |L6.14|
;;;308        {
;;;309            err = -2;
00000a  1e9b              SUBS     r3,r3,#2
00000c  e032              B        |L6.116|
                  |L6.14|
;;;310        }
;;;311    
;;;312        if (err == 0)
;;;313        {
;;;314            i32Active = FMC_GetXOMState(u32XomNum);
00000e  f7fffffe          BL       FMC_GetXOMState
;;;315    
;;;316            if(i32Active)
;;;317            {
;;;318                switch(u32XomNum)
;;;319                {
;;;320                case 0u:
;;;321                    u32Addr = (FMC->XOMR0STS & 0xFFFFFF00u) >> 8u;
;;;322                    break;
;;;323                case 1u:
;;;324                    u32Addr = (FMC->XOMR1STS & 0xFFFFFF00u) >> 8u;
;;;325                    break;
;;;326                case 2u:
;;;327                    u32Addr = (FMC->XOMR2STS & 0xFFFFFF00u) >> 8u;
;;;328                    break;
;;;329                case 3u:
;;;330                    u32Addr = (FMC->XOMR3STS & 0xFFFFFF00u) >> 8u;
;;;331                    break;
;;;332                default:
;;;333                    break;
;;;334                }
;;;335                FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
;;;336                FMC->ISPADDR = u32Addr;
;;;337                FMC->ISPDAT = 0x55aa03u;
;;;338                FMC->ISPTRG = 0x1u;
;;;339    #if ISBEN
;;;340                __ISB();
;;;341    #endif
;;;342                tout = FMC_TIMEOUT_ERASE;
;;;343                while ((tout-- > 0) && FMC->ISPTRG) {}
;;;344                if (tout <= 0)
;;;345                    err = -1;
000012  f04f36ff          MOV      r6,#0xffffffff
000016  b360              CBZ      r0,|L6.114|
000018  481b              LDR      r0,|L6.136|
00001a  b135              CBZ      r5,|L6.42|
00001c  2d01              CMP      r5,#1                 ;318
00001e  d007              BEQ      |L6.48|
000020  2d02              CMP      r5,#2                 ;318
000022  d02b              BEQ      |L6.124|
000024  2d03              CMP      r5,#3                 ;318
000026  d106              BNE      |L6.54|
000028  e02b              B        |L6.130|
                  |L6.42|
00002a  f8d010d0          LDR      r1,[r0,#0xd0]         ;321
00002e  e001              B        |L6.52|
                  |L6.48|
000030  f8d010d4          LDR      r1,[r0,#0xd4]         ;324
                  |L6.52|
000034  0a0c              LSRS     r4,r1,#8              ;321
                  |L6.54|
000036  2122              MOVS     r1,#0x22              ;335
000038  60c1              STR      r1,[r0,#0xc]          ;335
00003a  6044              STR      r4,[r0,#4]            ;336
00003c  4913              LDR      r1,|L6.140|
00003e  6081              STR      r1,[r0,#8]            ;337
000040  2101              MOVS     r1,#1                 ;338
000042  6101              STR      r1,[r0,#0x10]         ;338
000044  4912              LDR      r1,|L6.144|
000046  220a              MOVS     r2,#0xa               ;342
000048  6809              LDR      r1,[r1,#0]            ;342  ; SystemCoreClock
00004a  fbb1f1f2          UDIV     r1,r1,r2              ;342
00004e  0089              LSLS     r1,r1,#2              ;342
                  |L6.80|
000050  1e0a              SUBS     r2,r1,#0              ;343
000052  f1a10101          SUB      r1,r1,#1              ;343
000056  dd02              BLE      |L6.94|
000058  6902              LDR      r2,[r0,#0x10]         ;343
00005a  2a00              CMP      r2,#0                 ;343
00005c  d1f8              BNE      |L6.80|
                  |L6.94|
00005e  2900              CMP      r1,#0                 ;344
000060  dc00              BGT      |L6.100|
000062  4633              MOV      r3,r6
                  |L6.100|
;;;346    
;;;347                /* Check ISPFF flag to know whether erase OK or fail. */
;;;348                if(FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
000064  6801              LDR      r1,[r0,#0]
000066  0649              LSLS     r1,r1,#25
000068  d504              BPL      |L6.116|
;;;349                {
;;;350                    FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
00006a  6801              LDR      r1,[r0,#0]
00006c  f0410140          ORR      r1,r1,#0x40
000070  6001              STR      r1,[r0,#0]
                  |L6.114|
;;;351                    err = -1;
;;;352                }
;;;353            }
;;;354            else
;;;355            {
;;;356                err = -1;
000072  4633              MOV      r3,r6
                  |L6.116|
;;;357            }
;;;358        }
;;;359        g_FMC_i32ErrCode = err;
000074  4807              LDR      r0,|L6.148|
;;;360        return err;
000076  6003              STR      r3,[r0,#0]  ; g_FMC_i32ErrCode
000078  4618              MOV      r0,r3
;;;361    }
00007a  bd70              POP      {r4-r6,pc}
                  |L6.124|
00007c  f8d010d8          LDR      r1,[r0,#0xd8]         ;327
000080  e7d8              B        |L6.52|
                  |L6.130|
000082  f8d010dc          LDR      r1,[r0,#0xdc]         ;330
000086  e7d5              B        |L6.52|
;;;362    
                          ENDP

                  |L6.136|
                          DCD      0x4000c000
                  |L6.140|
                          DCD      0x0055aa03
                  |L6.144|
                          DCD      SystemCoreClock
                  |L6.148|
                          DCD      ||.data||

                          AREA ||i.FMC_Erase_Bank||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Bank PROC
;;;258      */
;;;259    int32_t FMC_Erase_Bank(uint32_t u32BankAddr)
000000  4b13              LDR      r3,|L7.80|
;;;260    {
;;;261        int32_t  tout;
;;;262    
;;;263        g_FMC_i32ErrCode = 0;
000002  2100              MOVS     r1,#0
;;;264        FMC->ISPCMD = FMC_ISPCMD_BANK_ERASE;
000004  4a13              LDR      r2,|L7.84|
000006  6019              STR      r1,[r3,#0]  ; g_FMC_i32ErrCode
000008  2123              MOVS     r1,#0x23
00000a  60d1              STR      r1,[r2,#0xc]
;;;265        FMC->ISPADDR = u32BankAddr;
00000c  6050              STR      r0,[r2,#4]
;;;266        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000e  2001              MOVS     r0,#1
000010  6110              STR      r0,[r2,#0x10]
;;;267    
;;;268        tout = FMC_TIMEOUT_ERASE;
000012  4811              LDR      r0,|L7.88|
000014  210a              MOVS     r1,#0xa
000016  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000018  fbb0f0f1          UDIV     r0,r0,r1
00001c  0081              LSLS     r1,r0,#2
                  |L7.30|
;;;269        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
00001e  1e08              SUBS     r0,r1,#0
000020  f1a10101          SUB      r1,r1,#1
000024  dd03              BLE      |L7.46|
000026  f8d200c0          LDR      r0,[r2,#0xc0]
00002a  07c0              LSLS     r0,r0,#31
00002c  d1f7              BNE      |L7.30|
                  |L7.46|
;;;270        if (tout <= 0)
;;;271        {
;;;272            g_FMC_i32ErrCode = -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
000032  2900              CMP      r1,#0                 ;270
000034  dc01              BGT      |L7.58|
                  |L7.54|
;;;273            return -1;
000036  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;274        }
;;;275    
;;;276        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
;;;277        {
;;;278            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
;;;279            g_FMC_i32ErrCode = -1;
;;;280            return -1;
;;;281        }
;;;282        return 0;
;;;283    }
000038  4770              BX       lr
                  |L7.58|
00003a  6811              LDR      r1,[r2,#0]            ;276
00003c  0649              LSLS     r1,r1,#25             ;276
00003e  d504              BPL      |L7.74|
000040  6811              LDR      r1,[r2,#0]            ;278
000042  f0410140          ORR      r1,r1,#0x40           ;278
000046  6011              STR      r1,[r2,#0]            ;278
000048  e7f5              B        |L7.54|
                  |L7.74|
00004a  2000              MOVS     r0,#0                 ;282
00004c  4770              BX       lr
;;;284    
                          ENDP

00004e  0000              DCW      0x0000
                  |L7.80|
                          DCD      ||.data||
                  |L7.84|
                          DCD      0x4000c000
                  |L7.88|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_Erase_Block||, CODE, READONLY, ALIGN=2

                  FMC_Erase_Block PROC
;;;222      */
;;;223    int32_t FMC_Erase_Block(uint32_t u32BlockAddr)
000000  4b13              LDR      r3,|L8.80|
;;;224    {
;;;225        int32_t  tout;
;;;226    
;;;227        g_FMC_i32ErrCode = 0;
000002  2100              MOVS     r1,#0
;;;228        FMC->ISPCMD = FMC_ISPCMD_BLOCK_ERASE;
000004  4a13              LDR      r2,|L8.84|
000006  6019              STR      r1,[r3,#0]  ; g_FMC_i32ErrCode
000008  2125              MOVS     r1,#0x25
00000a  60d1              STR      r1,[r2,#0xc]
;;;229        FMC->ISPADDR = u32BlockAddr;
00000c  6050              STR      r0,[r2,#4]
;;;230        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000e  2001              MOVS     r0,#1
000010  6110              STR      r0,[r2,#0x10]
;;;231    
;;;232        tout = FMC_TIMEOUT_ERASE;
000012  4811              LDR      r0,|L8.88|
000014  210a              MOVS     r1,#0xa
000016  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000018  fbb0f0f1          UDIV     r0,r0,r1
00001c  0081              LSLS     r1,r0,#2
                  |L8.30|
;;;233        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
00001e  1e08              SUBS     r0,r1,#0
000020  f1a10101          SUB      r1,r1,#1
000024  dd03              BLE      |L8.46|
000026  f8d200c0          LDR      r0,[r2,#0xc0]
00002a  07c0              LSLS     r0,r0,#31
00002c  d1f7              BNE      |L8.30|
                  |L8.46|
;;;234        if (tout <= 0)
;;;235        {
;;;236            g_FMC_i32ErrCode = -1;
00002e  f04f30ff          MOV      r0,#0xffffffff
000032  2900              CMP      r1,#0                 ;234
000034  dc01              BGT      |L8.58|
                  |L8.54|
;;;237            return -1;
000036  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;238        }
;;;239    
;;;240        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
;;;241        {
;;;242            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
;;;243            g_FMC_i32ErrCode = -1;
;;;244            return -1;
;;;245        }
;;;246        return 0;
;;;247    }
000038  4770              BX       lr
                  |L8.58|
00003a  6811              LDR      r1,[r2,#0]            ;240
00003c  0649              LSLS     r1,r1,#25             ;240
00003e  d504              BPL      |L8.74|
000040  6811              LDR      r1,[r2,#0]            ;242
000042  f0410140          ORR      r1,r1,#0x40           ;242
000046  6011              STR      r1,[r2,#0]            ;242
000048  e7f5              B        |L8.54|
                  |L8.74|
00004a  2000              MOVS     r0,#0                 ;246
00004c  4770              BX       lr
;;;248    
                          ENDP

00004e  0000              DCW      0x0000
                  |L8.80|
                          DCD      ||.data||
                  |L8.84|
                          DCD      0x4000c000
                  |L8.88|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_Erase_SPROM||, CODE, READONLY, ALIGN=2

                  FMC_Erase_SPROM PROC
;;;184      */
;;;185    int32_t FMC_Erase_SPROM(void)
000000  4b15              LDR      r3,|L9.88|
;;;186    {
;;;187        int32_t  tout;
;;;188    
;;;189        g_FMC_i32ErrCode = 0;
000002  2000              MOVS     r0,#0
;;;190        FMC->ISPCMD = FMC_ISPCMD_PAGE_ERASE;
000004  4a15              LDR      r2,|L9.92|
000006  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
000008  2022              MOVS     r0,#0x22
00000a  60d0              STR      r0,[r2,#0xc]
;;;191        FMC->ISPADDR = FMC_SPROM_BASE;
00000c  f44f1000          MOV      r0,#0x200000
000010  6050              STR      r0,[r2,#4]
;;;192        FMC->ISPDAT = 0x0055AA03UL;
000012  4813              LDR      r0,|L9.96|
000014  6090              STR      r0,[r2,#8]
;;;193        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000016  2001              MOVS     r0,#1
000018  6110              STR      r0,[r2,#0x10]
;;;194    
;;;195        tout = FMC_TIMEOUT_ERASE;
00001a  4812              LDR      r0,|L9.100|
00001c  210a              MOVS     r1,#0xa
00001e  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000020  fbb0f0f1          UDIV     r0,r0,r1
000024  0081              LSLS     r1,r0,#2
                  |L9.38|
;;;196        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000026  1e08              SUBS     r0,r1,#0
000028  f1a10101          SUB      r1,r1,#1
00002c  dd03              BLE      |L9.54|
00002e  f8d200c0          LDR      r0,[r2,#0xc0]
000032  07c0              LSLS     r0,r0,#31
000034  d1f7              BNE      |L9.38|
                  |L9.54|
;;;197        if (tout <= 0)
;;;198        {
;;;199            g_FMC_i32ErrCode = -1;
000036  f04f30ff          MOV      r0,#0xffffffff
00003a  2900              CMP      r1,#0                 ;197
00003c  dc01              BGT      |L9.66|
                  |L9.62|
;;;200            return -1;
00003e  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;201        }
;;;202    
;;;203        if (FMC->ISPCTL & FMC_ISPCTL_ISPFF_Msk)
;;;204        {
;;;205            FMC->ISPCTL |= FMC_ISPCTL_ISPFF_Msk;
;;;206            g_FMC_i32ErrCode = -1;
;;;207            return -1;
;;;208        }
;;;209        return 0;
;;;210    }
000040  4770              BX       lr
                  |L9.66|
000042  6811              LDR      r1,[r2,#0]            ;203
000044  0649              LSLS     r1,r1,#25             ;203
000046  d504              BPL      |L9.82|
000048  6811              LDR      r1,[r2,#0]            ;205
00004a  f0410140          ORR      r1,r1,#0x40           ;205
00004e  6011              STR      r1,[r2,#0]            ;205
000050  e7f5              B        |L9.62|
                  |L9.82|
000052  2000              MOVS     r0,#0                 ;209
000054  4770              BX       lr
;;;211    
                          ENDP

000056  0000              DCW      0x0000
                  |L9.88|
                          DCD      ||.data||
                  |L9.92|
                          DCD      0x4000c000
                  |L9.96|
                          DCD      0x0055aa03
                  |L9.100|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_GetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_GetBootSource PROC
;;;396      */
;;;397    int32_t FMC_GetBootSource (void)
000000  4806              LDR      r0,|L10.28|
;;;398    {
;;;399        if (FMC->ISPCTL & FMC_ISPCTL_BL_Msk)
000002  6801              LDR      r1,[r0,#0]
000004  03c9              LSLS     r1,r1,#15
000006  d501              BPL      |L10.12|
;;;400        {
;;;401            return 2;
000008  2002              MOVS     r0,#2
;;;402        }
;;;403        if (FMC->ISPCTL & FMC_ISPCTL_BS_Msk)
;;;404        {
;;;405            return 1;
;;;406        }
;;;407        return 0;
;;;408    }
00000a  4770              BX       lr
                  |L10.12|
00000c  6800              LDR      r0,[r0,#0]            ;403
00000e  0780              LSLS     r0,r0,#30             ;403
000010  d501              BPL      |L10.22|
000012  2001              MOVS     r0,#1                 ;405
000014  4770              BX       lr
                  |L10.22|
000016  2000              MOVS     r0,#0                 ;407
000018  4770              BX       lr
;;;409    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
                          DCD      0x4000c000

                          AREA ||i.FMC_GetChkSum||, CODE, READONLY, ALIGN=2

                  FMC_GetChkSum PROC
;;;1046     */
;;;1047   uint32_t  FMC_GetChkSum(uint32_t u32addr, uint32_t u32count)
000000  b5f0              PUSH     {r4-r7,lr}
;;;1048   {
;;;1049       int32_t  tout;
;;;1050   
;;;1051       g_FMC_i32ErrCode = 0;
000002  4c1a              LDR      r4,|L11.108|
000004  4605              MOV      r5,r0                 ;1048
000006  2000              MOVS     r0,#0
;;;1052   
;;;1053       if ((u32addr % 512UL) || (u32count % 512UL))
000008  6020              STR      r0,[r4,#0]  ; g_FMC_i32ErrCode
00000a  ea450001          ORR      r0,r5,r1
00000e  05c2              LSLS     r2,r0,#23
;;;1054       {
;;;1055           g_FMC_i32ErrCode = -2;
;;;1056           return 0xFFFFFFFF;
000010  f04f30ff          MOV      r0,#0xffffffff
000014  d002              BEQ      |L11.28|
000016  0041              LSLS     r1,r0,#1              ;1055
000018  6021              STR      r1,[r4,#0]  ; g_FMC_i32ErrCode
;;;1057       }
;;;1058   
;;;1059       FMC->ISPCMD  = FMC_ISPCMD_RUN_CKS;
;;;1060       FMC->ISPADDR = u32addr;
;;;1061       FMC->ISPDAT  = u32count;
;;;1062       FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;1063   
;;;1064       tout = FMC_TIMEOUT_CHKSUM;
;;;1065       while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
;;;1066       if (tout <= 0)
;;;1067       {
;;;1068           g_FMC_i32ErrCode = -1;
;;;1069           return 0xFFFFFFFF;
;;;1070       }
;;;1071   
;;;1072       FMC->ISPCMD = FMC_ISPCMD_READ_CKS;
;;;1073       FMC->ISPADDR    = u32addr;
;;;1074       FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
;;;1075   
;;;1076       tout = FMC_TIMEOUT_CHKSUM;
;;;1077       while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
;;;1078       if (tout <= 0)
;;;1079       {
;;;1080           g_FMC_i32ErrCode = -1;
;;;1081           return 0xFFFFFFFF;
;;;1082       }
;;;1083   
;;;1084       return FMC->ISPDAT;
;;;1085   }
00001a  bdf0              POP      {r4-r7,pc}
                  |L11.28|
00001c  4b14              LDR      r3,|L11.112|
00001e  222d              MOVS     r2,#0x2d              ;1059
000020  60da              STR      r2,[r3,#0xc]          ;1059
000022  605d              STR      r5,[r3,#4]            ;1060
000024  6099              STR      r1,[r3,#8]            ;1061
000026  2601              MOVS     r6,#1                 ;1062
000028  611e              STR      r6,[r3,#0x10]         ;1062
00002a  4912              LDR      r1,|L11.116|
00002c  6809              LDR      r1,[r1,#0]            ;1064  ; SystemCoreClock
00002e  0049              LSLS     r1,r1,#1              ;1064
000030  460a              MOV      r2,r1                 ;1064
                  |L11.50|
000032  1e0f              SUBS     r7,r1,#0              ;1065
000034  f1a10101          SUB      r1,r1,#1              ;1065
000038  dd03              BLE      |L11.66|
00003a  f8d370c0          LDR      r7,[r3,#0xc0]         ;1065
00003e  07ff              LSLS     r7,r7,#31             ;1065
000040  d1f7              BNE      |L11.50|
                  |L11.66|
000042  2900              CMP      r1,#0                 ;1066
000044  dd0d              BLE      |L11.98|
000046  210d              MOVS     r1,#0xd               ;1072
000048  60d9              STR      r1,[r3,#0xc]          ;1072
00004a  605d              STR      r5,[r3,#4]            ;1073
00004c  611e              STR      r6,[r3,#0x10]         ;1074
                  |L11.78|
00004e  1e11              SUBS     r1,r2,#0              ;1077
000050  f1a20201          SUB      r2,r2,#1              ;1077
000054  dd03              BLE      |L11.94|
000056  f8d310c0          LDR      r1,[r3,#0xc0]         ;1077
00005a  07c9              LSLS     r1,r1,#31             ;1077
00005c  d1f7              BNE      |L11.78|
                  |L11.94|
00005e  2a00              CMP      r2,#0                 ;1078
000060  dc01              BGT      |L11.102|
                  |L11.98|
000062  6020              STR      r0,[r4,#0]            ;1081  ; g_FMC_i32ErrCode
000064  bdf0              POP      {r4-r7,pc}
                  |L11.102|
000066  6898              LDR      r0,[r3,#8]            ;1084
000068  bdf0              POP      {r4-r7,pc}
;;;1086   
                          ENDP

00006a  0000              DCW      0x0000
                  |L11.108|
                          DCD      ||.data||
                  |L11.112|
                          DCD      0x4000c000
                  |L11.116|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_GetXOMState||, CODE, READONLY, ALIGN=2

                  FMC_GetXOMState PROC
;;;373      */
;;;374    int32_t FMC_GetXOMState(uint32_t u32XomNum)
000000  4601              MOV      r1,r0
;;;375    {
;;;376        uint32_t u32act;
;;;377        int32_t  ret = 0;
;;;378    
;;;379        if (u32XomNum >= 4UL)
000002  2804              CMP      r0,#4
000004  d302              BCC      |L12.12|
;;;380            ret = -2;
000006  f06f0001          MVN      r0,#1
;;;381    
;;;382        if (ret >= 0)
;;;383        {
;;;384            u32act = (((FMC->XOMSTS) & 0xful) & (1ul << u32XomNum)) >> u32XomNum;
;;;385            ret = (int32_t)u32act;
;;;386        }
;;;387        return ret;
;;;388    }
00000a  4770              BX       lr
                  |L12.12|
00000c  4804              LDR      r0,|L12.32|
00000e  f8d000e0          LDR      r0,[r0,#0xe0]         ;384
000012  2201              MOVS     r2,#1                 ;384
000014  408a              LSLS     r2,r2,r1              ;384
000016  f002020f          AND      r2,r2,#0xf            ;384
00001a  4010              ANDS     r0,r0,r2              ;384
00001c  40c8              LSRS     r0,r0,r1              ;384
00001e  4770              BX       lr
;;;389    
                          ENDP

                  |L12.32|
                          DCD      0x4000c000

                          AREA ||i.FMC_Is_OTP_Locked||, CODE, READONLY, ALIGN=2

                  FMC_Is_OTP_Locked PROC
;;;898      */
;;;899    int32_t FMC_Is_OTP_Locked(uint32_t otp_num)
000000  4b19              LDR      r3,|L13.104|
;;;900    {
;;;901        int32_t  tout;
;;;902    
;;;903        g_FMC_i32ErrCode = 0;
000002  2100              MOVS     r1,#0
;;;904    
;;;905        if (otp_num > 255UL)
000004  28ff              CMP      r0,#0xff
000006  6019              STR      r1,[r3,#0]  ; g_FMC_i32ErrCode
000008  d901              BLS      |L13.14|
;;;906        {
;;;907            g_FMC_i32ErrCode = -2;
00000a  1e88              SUBS     r0,r1,#2
;;;908            return -2;
00000c  e019              B        |L13.66|
                  |L13.14|
;;;909        }
;;;910    
;;;911        FMC->ISPCMD = FMC_ISPCMD_READ;
00000e  4a17              LDR      r2,|L13.108|
000010  60d1              STR      r1,[r2,#0xc]
;;;912        FMC->ISPADDR = FMC_OTP_BASE + 0x800UL + otp_num * 4UL;
000012  4917              LDR      r1,|L13.112|
000014  eb010080          ADD      r0,r1,r0,LSL #2
000018  6050              STR      r0,[r2,#4]
;;;913        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00001a  2001              MOVS     r0,#1
00001c  6110              STR      r0,[r2,#0x10]
;;;914    
;;;915        tout = FMC_TIMEOUT_READ;
00001e  4815              LDR      r0,|L13.116|
000020  6801              LDR      r1,[r0,#0]  ; SystemCoreClock
000022  200a              MOVS     r0,#0xa
000024  fbb1f0f0          UDIV     r0,r1,r0
000028  0041              LSLS     r1,r0,#1
                  |L13.42|
;;;916        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
00002a  1e08              SUBS     r0,r1,#0
00002c  f1a10101          SUB      r1,r1,#1
000030  dd03              BLE      |L13.58|
000032  f8d200c0          LDR      r0,[r2,#0xc0]
000036  07c0              LSLS     r0,r0,#31
000038  d1f7              BNE      |L13.42|
                  |L13.58|
;;;917        if (tout <= 0)
;;;918        {
;;;919            g_FMC_i32ErrCode = -1;
00003a  f04f30ff          MOV      r0,#0xffffffff
00003e  2900              CMP      r1,#0                 ;917
000040  dc01              BGT      |L13.70|
                  |L13.66|
;;;920            return -1;
000042  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;921        }
;;;922    
;;;923        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;924        {
;;;925            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;926            g_FMC_i32ErrCode = -1;
;;;927            return -1;
;;;928        }
;;;929        else
;;;930        {
;;;931            if (FMC->ISPDAT != 0xFFFFFFFFUL)
;;;932            {
;;;933                g_FMC_i32ErrCode = -1;
;;;934                return 1;   /* Lock work was progrmmed. OTP was locked. */
;;;935            }
;;;936        }
;;;937        return 0;
;;;938    }
000044  4770              BX       lr
                  |L13.70|
000046  6c11              LDR      r1,[r2,#0x40]         ;923
000048  0649              LSLS     r1,r1,#25             ;923
00004a  d504              BPL      |L13.86|
00004c  6c11              LDR      r1,[r2,#0x40]         ;925
00004e  f0410140          ORR      r1,r1,#0x40           ;925
000052  6411              STR      r1,[r2,#0x40]         ;925
000054  e7f5              B        |L13.66|
                  |L13.86|
000056  6891              LDR      r1,[r2,#8]            ;931
000058  1c49              ADDS     r1,r1,#1              ;931
00005a  d002              BEQ      |L13.98|
00005c  6018              STR      r0,[r3,#0]            ;934  ; g_FMC_i32ErrCode
00005e  2001              MOVS     r0,#1                 ;934
000060  4770              BX       lr
                  |L13.98|
000062  2000              MOVS     r0,#0                 ;937
000064  4770              BX       lr
;;;939    
                          ENDP

000066  0000              DCW      0x0000
                  |L13.104|
                          DCD      ||.data||
                  |L13.108|
                          DCD      0x4000c000
                  |L13.112|
                          DCD      0x00310800
                  |L13.116|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_Lock_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Lock_OTP PROC
;;;852      */
;;;853    int32_t FMC_Lock_OTP(uint32_t otp_num)
000000  4b17              LDR      r3,|L14.96|
;;;854    {
000002  b510              PUSH     {r4,lr}
;;;855        int32_t  tout;
;;;856    
;;;857        g_FMC_i32ErrCode = 0;
000004  2100              MOVS     r1,#0
;;;858    
;;;859        if (otp_num > 255UL)
000006  6019              STR      r1,[r3,#0]  ; g_FMC_i32ErrCode
000008  28ff              CMP      r0,#0xff
00000a  d901              BLS      |L14.16|
;;;860        {
;;;861            g_FMC_i32ErrCode = -2;
00000c  1e88              SUBS     r0,r1,#2
;;;862            return -2;
00000e  e01b              B        |L14.72|
                  |L14.16|
;;;863        }
;;;864    
;;;865        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000010  4a14              LDR      r2,|L14.100|
000012  2421              MOVS     r4,#0x21
000014  60d4              STR      r4,[r2,#0xc]
;;;866        FMC->ISPADDR = FMC_OTP_BASE + 0x800UL + otp_num * 4UL;
000016  4c14              LDR      r4,|L14.104|
000018  eb040080          ADD      r0,r4,r0,LSL #2
00001c  6050              STR      r0,[r2,#4]
;;;867        FMC->ISPDAT = 0UL;
00001e  6091              STR      r1,[r2,#8]
;;;868        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000020  2001              MOVS     r0,#1
000022  6110              STR      r0,[r2,#0x10]
;;;869    
;;;870        tout = FMC_TIMEOUT_WRITE;
000024  4811              LDR      r0,|L14.108|
000026  210a              MOVS     r1,#0xa
000028  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00002a  fbb0f0f1          UDIV     r0,r0,r1
00002e  0041              LSLS     r1,r0,#1
                  |L14.48|
;;;871        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000030  1e08              SUBS     r0,r1,#0
000032  f1a10101          SUB      r1,r1,#1
000036  dd03              BLE      |L14.64|
000038  f8d200c0          LDR      r0,[r2,#0xc0]
00003c  07c0              LSLS     r0,r0,#31
00003e  d1f7              BNE      |L14.48|
                  |L14.64|
;;;872        if (tout <= 0)
;;;873        {
;;;874            g_FMC_i32ErrCode = -1;
000040  f04f30ff          MOV      r0,#0xffffffff
000044  2900              CMP      r1,#0                 ;872
000046  dc01              BGT      |L14.76|
                  |L14.72|
;;;875            return -1;
000048  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;876        }
;;;877    
;;;878        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;879        {
;;;880            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;881            g_FMC_i32ErrCode = -1;
;;;882            return -1;
;;;883        }
;;;884        return 0;
;;;885    }
00004a  bd10              POP      {r4,pc}
                  |L14.76|
00004c  6c11              LDR      r1,[r2,#0x40]         ;878
00004e  0649              LSLS     r1,r1,#25             ;878
000050  d504              BPL      |L14.92|
000052  6c11              LDR      r1,[r2,#0x40]         ;880
000054  f0410140          ORR      r1,r1,#0x40           ;880
000058  6411              STR      r1,[r2,#0x40]         ;880
00005a  e7f5              B        |L14.72|
                  |L14.92|
00005c  2000              MOVS     r0,#0                 ;884
00005e  bd10              POP      {r4,pc}
;;;886    
                          ENDP

                  |L14.96|
                          DCD      ||.data||
                  |L14.100|
                          DCD      0x4000c000
                  |L14.104|
                          DCD      0x00310800
                  |L14.108|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_Open||, CODE, READONLY, ALIGN=2

                  FMC_Open PROC
;;;414      */
;;;415    void FMC_Open(void)
000000  4802              LDR      r0,|L15.12|
;;;416    {
;;;417        FMC->ISPCTL |=  FMC_ISPCTL_ISPEN_Msk;
000002  6801              LDR      r1,[r0,#0]
000004  f0410101          ORR      r1,r1,#1
000008  6001              STR      r1,[r0,#0]
;;;418    }
00000a  4770              BX       lr
;;;419    
                          ENDP

                  |L15.12|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read||, CODE, READONLY, ALIGN=2

                  FMC_Read PROC
;;;430      */
;;;431    uint32_t FMC_Read(uint32_t u32Addr)
000000  4b0e              LDR      r3,|L16.60|
;;;432    {
;;;433        int32_t  tout;
;;;434    
;;;435        g_FMC_i32ErrCode = 0;
;;;436        FMC->ISPCMD = FMC_ISPCMD_READ;
000002  490f              LDR      r1,|L16.64|
000004  2200              MOVS     r2,#0                 ;435
000006  601a              STR      r2,[r3,#0]  ; g_FMC_i32ErrCode
000008  60ca              STR      r2,[r1,#0xc]
;;;437        FMC->ISPADDR = u32Addr;
00000a  6048              STR      r0,[r1,#4]
;;;438        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00000c  2001              MOVS     r0,#1
00000e  6108              STR      r0,[r1,#0x10]
;;;439    
;;;440        tout = FMC_TIMEOUT_READ;
000010  480c              LDR      r0,|L16.68|
000012  220a              MOVS     r2,#0xa
000014  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000016  fbb0f0f2          UDIV     r0,r0,r2
00001a  0040              LSLS     r0,r0,#1
                  |L16.28|
;;;441        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
00001c  1e02              SUBS     r2,r0,#0
00001e  f1a00001          SUB      r0,r0,#1
000022  dd03              BLE      |L16.44|
000024  f8d120c0          LDR      r2,[r1,#0xc0]
000028  07d2              LSLS     r2,r2,#31
00002a  d1f7              BNE      |L16.28|
                  |L16.44|
;;;442        if (tout <= 0)
00002c  2800              CMP      r0,#0
00002e  dc03              BGT      |L16.56|
;;;443        {
;;;444            g_FMC_i32ErrCode = -1;
000030  f04f30ff          MOV      r0,#0xffffffff
;;;445            return 0xFFFFFFFF;
000034  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;446        }
;;;447        return FMC->ISPDAT;
;;;448    }
000036  4770              BX       lr
                  |L16.56|
000038  6888              LDR      r0,[r1,#8]            ;447
00003a  4770              BX       lr
;;;449    
                          ENDP

                  |L16.60|
                          DCD      ||.data||
                  |L16.64|
                          DCD      0x4000c000
                  |L16.68|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_ReadConfig||, CODE, READONLY, ALIGN=2

                  FMC_ReadConfig PROC
;;;953      */
;;;954    int32_t FMC_ReadConfig(uint32_t u32Config[], uint32_t u32Count)
000000  b570              PUSH     {r4-r6,lr}
;;;955    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;956        int32_t   ret = 0;
000006  2400              MOVS     r4,#0
;;;957    
;;;958        u32Config[0] = FMC_Read(FMC_CONFIG_BASE);
000008  f44f1040          MOV      r0,#0x300000
00000c  f7fffffe          BL       FMC_Read
;;;959    
;;;960        if (g_FMC_i32ErrCode != 0)
000010  6028              STR      r0,[r5,#0]
000012  4807              LDR      r0,|L17.48|
000014  6800              LDR      r0,[r0,#0]  ; g_FMC_i32ErrCode
000016  2800              CMP      r0,#0
000018  d108              BNE      |L17.44|
;;;961            return g_FMC_i32ErrCode;
;;;962    
;;;963        if (u32Count < 2UL)
00001a  2e02              CMP      r6,#2
00001c  d201              BCS      |L17.34|
;;;964        {
;;;965            ret = -2;
00001e  1e84              SUBS     r4,r0,#2
000020  e003              B        |L17.42|
                  |L17.34|
;;;966        }
;;;967        else
;;;968        {
;;;969            u32Config[1] = FMC_Read(FMC_CONFIG_BASE+4UL);
000022  4804              LDR      r0,|L17.52|
000024  f7fffffe          BL       FMC_Read
000028  6068              STR      r0,[r5,#4]
                  |L17.42|
;;;970        }
;;;971        return ret;
00002a  4620              MOV      r0,r4
                  |L17.44|
;;;972    }
00002c  bd70              POP      {r4-r6,pc}
;;;973    
                          ENDP

00002e  0000              DCW      0x0000
                  |L17.48|
                          DCD      ||.data||
                  |L17.52|
                          DCD      0x00300004

                          AREA ||i.FMC_ReadDataFlashBaseAddr||, CODE, READONLY, ALIGN=2

                  FMC_ReadDataFlashBaseAddr PROC
;;;499      */
;;;500    uint32_t FMC_ReadDataFlashBaseAddr(void)
000000  4801              LDR      r0,|L18.8|
;;;501    {
;;;502        return FMC->DFBA;
000002  6940              LDR      r0,[r0,#0x14]
;;;503    }
000004  4770              BX       lr
;;;504    
                          ENDP

000006  0000              DCW      0x0000
                  |L18.8|
                          DCD      0x4000c000

                          AREA ||i.FMC_Read_64||, CODE, READONLY, ALIGN=2

                  FMC_Read_64 PROC
;;;462      */
;;;463    int32_t FMC_Read_64(uint32_t u32addr, uint32_t * u32data0, uint32_t * u32data1)
000000  b570              PUSH     {r4-r6,lr}
;;;464    {
;;;465        int32_t  tout;
;;;466    
;;;467        g_FMC_i32ErrCode = 0;
000002  4d16              LDR      r5,|L19.92|
000004  2300              MOVS     r3,#0
;;;468        FMC->ISPCMD = FMC_ISPCMD_READ_64;
000006  4c16              LDR      r4,|L19.96|
000008  2640              MOVS     r6,#0x40
00000a  602b              STR      r3,[r5,#0]  ; g_FMC_i32ErrCode
00000c  60e6              STR      r6,[r4,#0xc]
;;;469        FMC->ISPADDR    = u32addr;
00000e  6060              STR      r0,[r4,#4]
;;;470        FMC->ISPDAT = 0x0UL;
000010  60a3              STR      r3,[r4,#8]
;;;471        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000012  2001              MOVS     r0,#1
000014  6120              STR      r0,[r4,#0x10]
;;;472    
;;;473        tout = FMC_TIMEOUT_READ;
000016  4813              LDR      r0,|L19.100|
000018  230a              MOVS     r3,#0xa
00001a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001c  fbb0f0f3          UDIV     r0,r0,r3
000020  0043              LSLS     r3,r0,#1
                  |L19.34|
;;;474        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000022  1e18              SUBS     r0,r3,#0
000024  f1a30301          SUB      r3,r3,#1
000028  dd03              BLE      |L19.50|
00002a  f8d400c0          LDR      r0,[r4,#0xc0]
00002e  07c0              LSLS     r0,r0,#31
000030  d1f7              BNE      |L19.34|
                  |L19.50|
;;;475        if (tout <= 0)
;;;476        {
;;;477            g_FMC_i32ErrCode = -1;
000032  f04f30ff          MOV      r0,#0xffffffff
000036  2b00              CMP      r3,#0                 ;475
000038  dc01              BGT      |L19.62|
                  |L19.58|
;;;478            return -1;
00003a  6028              STR      r0,[r5,#0]  ; g_FMC_i32ErrCode
;;;479        }
;;;480    
;;;481        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;482        {
;;;483            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;484            g_FMC_i32ErrCode = -1;
;;;485            return -1;
;;;486        }
;;;487        else
;;;488        {
;;;489            *u32data0 = FMC->MPDAT0;
;;;490            *u32data1 = FMC->MPDAT1;
;;;491        }
;;;492        return 0;
;;;493    }
00003c  bd70              POP      {r4-r6,pc}
                  |L19.62|
00003e  6c23              LDR      r3,[r4,#0x40]         ;481
000040  065b              LSLS     r3,r3,#25             ;481
000042  d504              BPL      |L19.78|
000044  6c21              LDR      r1,[r4,#0x40]         ;483
000046  f0410140          ORR      r1,r1,#0x40           ;483
00004a  6421              STR      r1,[r4,#0x40]         ;483
00004c  e7f5              B        |L19.58|
                  |L19.78|
00004e  f8540f80          LDR      r0,[r4,#0x80]!        ;489
000052  6008              STR      r0,[r1,#0]            ;490
000054  6860              LDR      r0,[r4,#4]            ;490
000056  6010              STR      r0,[r2,#0]            ;492
000058  2000              MOVS     r0,#0                 ;492
00005a  bd70              POP      {r4-r6,pc}
;;;494    
                          ENDP

                  |L19.92|
                          DCD      ||.data||
                  |L19.96|
                          DCD      0x4000c000
                  |L19.100|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_Read_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Read_OTP PROC
;;;802      */
;;;803    int32_t FMC_Read_OTP(uint32_t otp_num, uint32_t *low_word, uint32_t *high_word)
000000  b570              PUSH     {r4-r6,lr}
;;;804    {
;;;805        int32_t  tout;
;;;806    
;;;807        g_FMC_i32ErrCode = 0;
000002  4d1a              LDR      r5,|L20.108|
000004  2300              MOVS     r3,#0
;;;808    
;;;809        if (otp_num > 255UL)
000006  28ff              CMP      r0,#0xff
000008  602b              STR      r3,[r5,#0]  ; g_FMC_i32ErrCode
00000a  d901              BLS      |L20.16|
;;;810        {
;;;811            g_FMC_i32ErrCode = -2;
00000c  1e98              SUBS     r0,r3,#2
;;;812            return -2;
00000e  e01c              B        |L20.74|
                  |L20.16|
;;;813        }
;;;814    
;;;815        FMC->ISPCMD = FMC_ISPCMD_READ_64;
000010  4c17              LDR      r4,|L20.112|
000012  2640              MOVS     r6,#0x40
000014  60e6              STR      r6,[r4,#0xc]
;;;816        FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL ;
000016  f44f1644          MOV      r6,#0x310000
00001a  eb0600c0          ADD      r0,r6,r0,LSL #3
00001e  6060              STR      r0,[r4,#4]
;;;817        FMC->ISPDAT = 0x0UL;
000020  60a3              STR      r3,[r4,#8]
;;;818        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000022  2001              MOVS     r0,#1
000024  6120              STR      r0,[r4,#0x10]
;;;819    
;;;820        tout = FMC_TIMEOUT_WRITE;
000026  4813              LDR      r0,|L20.116|
000028  230a              MOVS     r3,#0xa
00002a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00002c  fbb0f0f3          UDIV     r0,r0,r3
000030  0043              LSLS     r3,r0,#1
                  |L20.50|
;;;821        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000032  1e18              SUBS     r0,r3,#0
000034  f1a30301          SUB      r3,r3,#1
000038  dd03              BLE      |L20.66|
00003a  f8d400c0          LDR      r0,[r4,#0xc0]
00003e  07c0              LSLS     r0,r0,#31
000040  d1f7              BNE      |L20.50|
                  |L20.66|
;;;822        if (tout <= 0)
;;;823        {
;;;824            g_FMC_i32ErrCode = -1;
000042  f04f30ff          MOV      r0,#0xffffffff
000046  2b00              CMP      r3,#0                 ;822
000048  dc01              BGT      |L20.78|
                  |L20.74|
;;;825            return -1;
00004a  6028              STR      r0,[r5,#0]  ; g_FMC_i32ErrCode
;;;826        }
;;;827    
;;;828        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;829        {
;;;830            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;831            g_FMC_i32ErrCode = -1;
;;;832            return -1;
;;;833        }
;;;834        else
;;;835        {
;;;836            *low_word = FMC->MPDAT0;
;;;837            *high_word = FMC->MPDAT1;
;;;838        }
;;;839        return 0;
;;;840    }
00004c  bd70              POP      {r4-r6,pc}
                  |L20.78|
00004e  6c23              LDR      r3,[r4,#0x40]         ;828
000050  065b              LSLS     r3,r3,#25             ;828
000052  d504              BPL      |L20.94|
000054  6c21              LDR      r1,[r4,#0x40]         ;830
000056  f0410140          ORR      r1,r1,#0x40           ;830
00005a  6421              STR      r1,[r4,#0x40]         ;830
00005c  e7f5              B        |L20.74|
                  |L20.94|
00005e  f8540f80          LDR      r0,[r4,#0x80]!        ;836
000062  6008              STR      r0,[r1,#0]            ;837
000064  6860              LDR      r0,[r4,#4]            ;837
000066  6010              STR      r0,[r2,#0]            ;839
000068  2000              MOVS     r0,#0                 ;839
00006a  bd70              POP      {r4-r6,pc}
;;;841    
                          ENDP

                  |L20.108|
                          DCD      ||.data||
                  |L20.112|
                          DCD      0x4000c000
                  |L20.116|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_SetBootSource||, CODE, READONLY, ALIGN=2

                  FMC_SetBootSource PROC
;;;514      */
;;;515    void FMC_SetBootSource(int32_t i32BootSrc)
000000  4905              LDR      r1,|L21.24|
;;;516    {
;;;517        if(i32BootSrc)
000002  2800              CMP      r0,#0
;;;518        {
;;;519            FMC->ISPCTL |= FMC_ISPCTL_BS_Msk; /* Boot from LDROM */
;;;520        }
;;;521        else
;;;522        {
;;;523            FMC->ISPCTL &= ~FMC_ISPCTL_BS_Msk;/* Boot from APROM */
000004  6808              LDR      r0,[r1,#0]
000006  d002              BEQ      |L21.14|
000008  f0400002          ORR      r0,r0,#2              ;519
00000c  e001              B        |L21.18|
                  |L21.14|
00000e  f0200002          BIC      r0,r0,#2
                  |L21.18|
000012  6008              STR      r0,[r1,#0]            ;519
;;;524        }
;;;525    }
000014  4770              BX       lr
;;;526    
                          ENDP

000016  0000              DCW      0x0000
                  |L21.24|
                          DCD      0x4000c000

                          AREA ||i.FMC_SetSPKey||, CODE, READONLY, ALIGN=2

                  FMC_SetSPKey PROC
;;;1164     */
;;;1165   int32_t  FMC_SetSPKey(uint32_t key[3], uint32_t kpmax, uint32_t kemax,
000000  e92d4fff          PUSH     {r0-r11,lr}
;;;1166                         const int32_t lock_CONFIG, const int32_t lock_SPROM)
;;;1167   {
;;;1168       uint32_t  lock_ctrl = 0UL;
;;;1169       uint32_t  u32KeySts;
;;;1170       int32_t   tout;
;;;1171       int32_t   ret = 0;
;;;1172   
;;;1173       g_FMC_i32ErrCode = 0;
000004  4d47              LDR      r5,|L22.292|
;;;1174   
;;;1175       if (FMC->KPKEYSTS != 0x200UL)
000006  f8dfa120          LDR      r10,|L22.296|
00000a  2600              MOVS     r6,#0                 ;1168
00000c  f8dd9034          LDR      r9,[sp,#0x34]         ;1173
000010  4607              MOV      r7,r0                 ;1167
000012  602e              STR      r6,[r5,#0]  ; g_FMC_i32ErrCode
000014  f8da0060          LDR      r0,[r10,#0x60]
000018  4698              MOV      r8,r3                 ;1167
00001a  4634              MOV      r4,r6                 ;1171
00001c  f5b07f00          CMP      r0,#0x200
000020  d000              BEQ      |L22.36|
;;;1176       {
;;;1177           ret = -1;
000022  1e74              SUBS     r4,r6,#1
                  |L22.36|
;;;1178       }
;;;1179   
;;;1180       if (FMC_Erase(FMC_KPROM_BASE))
000024  4841              LDR      r0,|L22.300|
000026  f7fffffe          BL       FMC_Erase
00002a  b108              CBZ      r0,|L22.48|
;;;1181       {
;;;1182           ret = -2;
00002c  f06f0401          MVN      r4,#1
                  |L22.48|
;;;1183       }
;;;1184   
;;;1185       if (FMC_Erase(FMC_KPROM_BASE+0x200UL))
000030  483f              LDR      r0,|L22.304|
000032  f7fffffe          BL       FMC_Erase
;;;1186       {
;;;1187           ret = -3;
000036  f06f0b02          MVN      r11,#2
00003a  b100              CBZ      r0,|L22.62|
00003c  465c              MOV      r4,r11
                  |L22.62|
;;;1188       }
;;;1189   
;;;1190       if (!lock_CONFIG)
00003e  f1b80f00          CMP      r8,#0
000042  d100              BNE      |L22.70|
;;;1191       {
;;;1192           lock_ctrl |= 0x1UL;
000044  2601              MOVS     r6,#1
                  |L22.70|
;;;1193       }
;;;1194   
;;;1195       if (!lock_SPROM)
000046  f1b90f00          CMP      r9,#0
00004a  d101              BNE      |L22.80|
;;;1196       {
;;;1197           lock_ctrl |= 0x2UL;
00004c  f0460602          ORR      r6,r6,#2
                  |L22.80|
;;;1198       }
;;;1199   
;;;1200       if (ret == 0)
000050  bb94              CBNZ     r4,|L22.184|
;;;1201       {
;;;1202           FMC_Write(FMC_KPROM_BASE, key[0]);
000052  4836              LDR      r0,|L22.300|
000054  6839              LDR      r1,[r7,#0]
000056  f7fffffe          BL       FMC_Write
;;;1203           FMC_Write(FMC_KPROM_BASE+0x4UL, key[1]);
00005a  4834              LDR      r0,|L22.300|
00005c  6879              LDR      r1,[r7,#4]
00005e  1d00              ADDS     r0,r0,#4
000060  f7fffffe          BL       FMC_Write
;;;1204           FMC_Write(FMC_KPROM_BASE+0x8UL, key[2]);
000064  4831              LDR      r0,|L22.300|
000066  68b9              LDR      r1,[r7,#8]
000068  3008              ADDS     r0,r0,#8
00006a  f7fffffe          BL       FMC_Write
;;;1205           FMC_Write(FMC_KPROM_BASE+0xCUL, kpmax);
00006e  482f              LDR      r0,|L22.300|
000070  9901              LDR      r1,[sp,#4]
000072  300c              ADDS     r0,r0,#0xc
000074  f7fffffe          BL       FMC_Write
;;;1206           FMC_Write(FMC_KPROM_BASE+0x10UL, kemax);
000078  482c              LDR      r0,|L22.300|
00007a  9902              LDR      r1,[sp,#8]
00007c  3010              ADDS     r0,r0,#0x10
00007e  f7fffffe          BL       FMC_Write
;;;1207           FMC_Write(FMC_KPROM_BASE+0x14UL, lock_ctrl);
000082  482a              LDR      r0,|L22.300|
000084  4631              MOV      r1,r6
000086  3014              ADDS     r0,r0,#0x14
000088  f7fffffe          BL       FMC_Write
;;;1208   
;;;1209           tout = FMC_TIMEOUT_WRITE;
00008c  4829              LDR      r0,|L22.308|
00008e  210a              MOVS     r1,#0xa
000090  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000092  fbb0f0f1          UDIV     r0,r0,r1
000096  0040              LSLS     r0,r0,#1
000098  4651              MOV      r1,r10                ;1175
                  |L22.154|
;;;1210           while ((tout-- > 0) && (FMC->KPKEYSTS & FMC_KPKEYSTS_KEYBUSY_Msk)) {}
00009a  1e02              SUBS     r2,r0,#0
00009c  f1a00001          SUB      r0,r0,#1
0000a0  dd02              BLE      |L22.168|
0000a2  6e0a              LDR      r2,[r1,#0x60]
0000a4  07d2              LSLS     r2,r2,#31
0000a6  d1f8              BNE      |L22.154|
                  |L22.168|
;;;1211           if (tout <= 0)
0000a8  2800              CMP      r0,#0
0000aa  dc06              BGT      |L22.186|
;;;1212           {
;;;1213               g_FMC_i32ErrCode = -3;
0000ac  4658              MOV      r0,r11
;;;1214               return -3;
0000ae  f8c5b000          STR      r11,[r5,#0]  ; g_FMC_i32ErrCode
                  |L22.178|
;;;1215           }
;;;1216   
;;;1217           u32KeySts = FMC->KPKEYSTS;
;;;1218   
;;;1219           if (!(u32KeySts & FMC_KPKEYSTS_KEYLOCK_Msk))
;;;1220           {
;;;1221               /* Security key lock failed! */
;;;1222               ret = -4;
;;;1223           }
;;;1224           else if ((lock_CONFIG && (!(u32KeySts & FMC_KPKEYSTS_CFGFLAG_Msk))) ||
;;;1225                    ((!lock_CONFIG) && (u32KeySts & FMC_KPKEYSTS_CFGFLAG_Msk)))
;;;1226           {
;;;1227               /* CONFIG lock failed! */
;;;1228               ret = -5;
;;;1229           }
;;;1230           else if ((lock_SPROM && (!(u32KeySts & FMC_KPKEYSTS_SPFLAG_Msk))) ||
;;;1231                    ((!lock_SPROM) && (u32KeySts & FMC_KPKEYSTS_SPFLAG_Msk)))
;;;1232           {
;;;1233               /* CONFIG lock failed! */
;;;1234               ret = -6;
;;;1235           }
;;;1236           else if (((FMC->KPCNT & FMC_KPCNT_KPMAX_Msk) >> FMC_KPCNT_KPMAX_Pos) != kpmax)
;;;1237           {
;;;1238               /* KPMAX failed! */
;;;1239               ret = -7;
;;;1240           }
;;;1241           else if (((FMC->KPKEYCNT & FMC_KPKEYCNT_KPKEMAX_Msk) >> FMC_KPKEYCNT_KPKEMAX_Pos) != kemax)
;;;1242           {
;;;1243               /* KEMAX failed! */
;;;1244               ret = -8;
;;;1245           }
;;;1246       }
;;;1247       g_FMC_i32ErrCode = ret;
;;;1248       return ret;
;;;1249   }
0000b2  b004              ADD      sp,sp,#0x10
0000b4  e8bd8ff0          POP      {r4-r11,pc}
                  |L22.184|
0000b8  e030              B        |L22.284|
                  |L22.186|
0000ba  6e08              LDR      r0,[r1,#0x60]         ;1217
0000bc  0782              LSLS     r2,r0,#30             ;1219
0000be  d402              BMI      |L22.198|
0000c0  f06f0403          MVN      r4,#3                 ;1222
0000c4  e02a              B        |L22.284|
                  |L22.198|
0000c6  f1b80f00          CMP      r8,#0                 ;1224
0000ca  ea4f6280          LSL      r2,r0,#26             ;1225
0000ce  d002              BEQ      |L22.214|
0000d0  2a00              CMP      r2,#0                 ;1224
0000d2  da02              BGE      |L22.218|
0000d4  e004              B        |L22.224|
                  |L22.214|
0000d6  2a00              CMP      r2,#0                 ;1225
0000d8  da02              BGE      |L22.224|
                  |L22.218|
0000da  f06f0404          MVN      r4,#4                 ;1228
0000de  e01d              B        |L22.284|
                  |L22.224|
0000e0  f1b90f00          CMP      r9,#0                 ;1230
0000e4  ea4f6040          LSL      r0,r0,#25             ;1231
0000e8  d002              BEQ      |L22.240|
0000ea  2800              CMP      r0,#0                 ;1230
0000ec  da02              BGE      |L22.244|
0000ee  e004              B        |L22.250|
                  |L22.240|
0000f0  2800              CMP      r0,#0                 ;1231
0000f2  da02              BGE      |L22.250|
                  |L22.244|
0000f4  f06f0405          MVN      r4,#5                 ;1234
0000f8  e010              B        |L22.284|
                  |L22.250|
0000fa  6e88              LDR      r0,[r1,#0x68]         ;1236
0000fc  f3c02203          UBFX     r2,r0,#8,#4           ;1236
000100  9801              LDR      r0,[sp,#4]            ;1236
000102  4282              CMP      r2,r0                 ;1236
000104  d002              BEQ      |L22.268|
000106  f06f0406          MVN      r4,#6                 ;1239
00010a  e007              B        |L22.284|
                  |L22.268|
00010c  6e48              LDR      r0,[r1,#0x64]         ;1241
00010e  f3c02105          UBFX     r1,r0,#8,#6           ;1241
000112  9802              LDR      r0,[sp,#8]            ;1241
000114  4281              CMP      r1,r0                 ;1241
000116  d001              BEQ      |L22.284|
000118  f06f0407          MVN      r4,#7                 ;1244
                  |L22.284|
00011c  4620              MOV      r0,r4                 ;1248
00011e  602c              STR      r4,[r5,#0]            ;1248  ; g_FMC_i32ErrCode
000120  e7c7              B        |L22.178|
;;;1250   
                          ENDP

000122  0000              DCW      0x0000
                  |L22.292|
                          DCD      ||.data||
                  |L22.296|
                          DCD      0x4000c000
                  |L22.300|
                          DCD      0x00301000
                  |L22.304|
                          DCD      0x00301200
                  |L22.308|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_Write||, CODE, READONLY, ALIGN=2

                  FMC_Write PROC
;;;537      */
;;;538    int32_t FMC_Write(uint32_t u32Addr, uint32_t u32Data)
000000  4b14              LDR      r3,|L23.84|
;;;539    {
000002  b510              PUSH     {r4,lr}
;;;540        int32_t  tout;
;;;541    
;;;542        g_FMC_i32ErrCode = 0;
000004  2200              MOVS     r2,#0
;;;543        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000006  601a              STR      r2,[r3,#0]  ; g_FMC_i32ErrCode
000008  4a13              LDR      r2,|L23.88|
00000a  2421              MOVS     r4,#0x21
00000c  60d4              STR      r4,[r2,#0xc]
;;;544        FMC->ISPADDR = u32Addr;
00000e  6050              STR      r0,[r2,#4]
;;;545        FMC->ISPDAT = u32Data;
000010  6091              STR      r1,[r2,#8]
;;;546        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000012  2001              MOVS     r0,#1
000014  6110              STR      r0,[r2,#0x10]
;;;547    
;;;548        tout = FMC_TIMEOUT_WRITE;
000016  4811              LDR      r0,|L23.92|
000018  210a              MOVS     r1,#0xa
00001a  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
00001c  fbb0f0f1          UDIV     r0,r0,r1
000020  0041              LSLS     r1,r0,#1
                  |L23.34|
;;;549        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000022  1e08              SUBS     r0,r1,#0
000024  f1a10101          SUB      r1,r1,#1
000028  dd03              BLE      |L23.50|
00002a  f8d200c0          LDR      r0,[r2,#0xc0]
00002e  07c0              LSLS     r0,r0,#31
000030  d1f7              BNE      |L23.34|
                  |L23.50|
;;;550        if (tout <= 0)
;;;551        {
;;;552            g_FMC_i32ErrCode = -1;
000032  f04f30ff          MOV      r0,#0xffffffff
000036  2900              CMP      r1,#0                 ;550
000038  dc01              BGT      |L23.62|
                  |L23.58|
;;;553            return -1;
00003a  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;554        }
;;;555    
;;;556        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;557        {
;;;558            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;559            g_FMC_i32ErrCode = -1;
;;;560            return -1;
;;;561        }
;;;562        return 0;
;;;563    }
00003c  bd10              POP      {r4,pc}
                  |L23.62|
00003e  6c11              LDR      r1,[r2,#0x40]         ;556
000040  0649              LSLS     r1,r1,#25             ;556
000042  d504              BPL      |L23.78|
000044  6c11              LDR      r1,[r2,#0x40]         ;558
000046  f0410140          ORR      r1,r1,#0x40           ;558
00004a  6411              STR      r1,[r2,#0x40]         ;558
00004c  e7f5              B        |L23.58|
                  |L23.78|
00004e  2000              MOVS     r0,#0                 ;562
000050  bd10              POP      {r4,pc}
;;;564    
                          ENDP

000052  0000              DCW      0x0000
                  |L23.84|
                          DCD      ||.data||
                  |L23.88|
                          DCD      0x4000c000
                  |L23.92|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_Write8Bytes||, CODE, READONLY, ALIGN=2

                  FMC_Write8Bytes PROC
;;;576      */
;;;577    int32_t FMC_Write8Bytes(uint32_t u32addr, uint32_t u32data0, uint32_t u32data1)
000000  b530              PUSH     {r4,r5,lr}
;;;578    {
;;;579        int32_t  tout;
;;;580    
;;;581        g_FMC_i32ErrCode = 0;
000002  4c15              LDR      r4,|L24.88|
000004  2300              MOVS     r3,#0
;;;582        FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_64;
000006  2561              MOVS     r5,#0x61
000008  6023              STR      r3,[r4,#0]  ; g_FMC_i32ErrCode
00000a  4b14              LDR      r3,|L24.92|
00000c  60dd              STR      r5,[r3,#0xc]
;;;583        FMC->ISPADDR = u32addr;
00000e  6058              STR      r0,[r3,#4]
;;;584        FMC->MPDAT0  = u32data0;
000010  f8c31080          STR      r1,[r3,#0x80]
;;;585        FMC->MPDAT1  = u32data1;
000014  f8c32084          STR      r2,[r3,#0x84]
;;;586        FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
000018  2001              MOVS     r0,#1
00001a  6118              STR      r0,[r3,#0x10]
;;;587    
;;;588        tout = FMC_TIMEOUT_WRITE;
00001c  4810              LDR      r0,|L24.96|
00001e  210a              MOVS     r1,#0xa
000020  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000022  fbb0f0f1          UDIV     r0,r0,r1
000026  0041              LSLS     r1,r0,#1
                  |L24.40|
;;;589        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000028  1e08              SUBS     r0,r1,#0
00002a  f1a10101          SUB      r1,r1,#1
00002e  dd03              BLE      |L24.56|
000030  f8d300c0          LDR      r0,[r3,#0xc0]
000034  07c0              LSLS     r0,r0,#31
000036  d1f7              BNE      |L24.40|
                  |L24.56|
;;;590        if (tout <= 0)
;;;591        {
;;;592            g_FMC_i32ErrCode = -1;
000038  f04f30ff          MOV      r0,#0xffffffff
00003c  2900              CMP      r1,#0                 ;590
00003e  dc01              BGT      |L24.68|
                  |L24.64|
;;;593            return -1;
000040  6020              STR      r0,[r4,#0]  ; g_FMC_i32ErrCode
;;;594        }
;;;595    
;;;596        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;597        {
;;;598            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;599            g_FMC_i32ErrCode = -1;
;;;600            return -1;
;;;601        }
;;;602        return 0;
;;;603    }
000042  bd30              POP      {r4,r5,pc}
                  |L24.68|
000044  6c19              LDR      r1,[r3,#0x40]         ;596
000046  0649              LSLS     r1,r1,#25             ;596
000048  d504              BPL      |L24.84|
00004a  6c19              LDR      r1,[r3,#0x40]         ;598
00004c  f0410140          ORR      r1,r1,#0x40           ;598
000050  6419              STR      r1,[r3,#0x40]         ;598
000052  e7f5              B        |L24.64|
                  |L24.84|
000054  2000              MOVS     r0,#0                 ;602
000056  bd30              POP      {r4,r5,pc}
;;;604    
                          ENDP

                  |L24.88|
                          DCD      ||.data||
                  |L24.92|
                          DCD      0x4000c000
                  |L24.96|
                          DCD      SystemCoreClock

                          AREA ||i.FMC_WriteConfig||, CODE, READONLY, ALIGN=2

                  FMC_WriteConfig PROC
;;;986      */
;;;987    int32_t FMC_WriteConfig(uint32_t u32Config[], uint32_t u32Count)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;988    {
;;;989        int   i;
;;;990    
;;;991        FMC_ENABLE_CFG_UPDATE();
000004  4d24              LDR      r5,|L25.152|
000006  4606              MOV      r6,r0                 ;988
000008  4688              MOV      r8,r1                 ;988
00000a  6828              LDR      r0,[r5,#0]
00000c  f0400010          ORR      r0,r0,#0x10
000010  6028              STR      r0,[r5,#0]
;;;992    
;;;993        if (FMC_Erase(FMC_CONFIG_BASE) != 0)
000012  01af              LSLS     r7,r5,#6
000014  4638              MOV      r0,r7
000016  f7fffffe          BL       FMC_Erase
;;;994            return -1;
00001a  f04f3bff          MOV      r11,#0xffffffff
00001e  b110              CBZ      r0,|L25.38|
                  |L25.32|
000020  4658              MOV      r0,r11
                  |L25.34|
;;;995    
;;;996        if ((FMC_Read(FMC_CONFIG_BASE) != 0xFFFFFFFF) || (FMC_Read(FMC_CONFIG_BASE+4) != 0xFFFFFFFF) ||
;;;997                (FMC_Read(FMC_CONFIG_BASE+8) != 0xFFFF5A5A))
;;;998        {
;;;999            FMC_DISABLE_CFG_UPDATE();
;;;1000           return -1;
;;;1001       }
;;;1002   
;;;1003       if (g_FMC_i32ErrCode != 0)
;;;1004       {
;;;1005           FMC_DISABLE_CFG_UPDATE();
;;;1006           return -1;
;;;1007       }
;;;1008   
;;;1009       for (i = 0; i < u32Count; i++)
;;;1010       {
;;;1011           if (FMC_Write(FMC_CONFIG_BASE+i*4UL, u32Config[i]) != 0)
;;;1012           {
;;;1013               FMC_DISABLE_CFG_UPDATE();
;;;1014               return -1;
;;;1015           }
;;;1016   
;;;1017           if (FMC_Read(FMC_CONFIG_BASE+i*4UL) != u32Config[i])
;;;1018           {
;;;1019               FMC_DISABLE_CFG_UPDATE();
;;;1020               return -1;
;;;1021           }
;;;1022   
;;;1023           if (g_FMC_i32ErrCode != 0)
;;;1024           {
;;;1025               FMC_DISABLE_CFG_UPDATE();
;;;1026               return -1;
;;;1027           }
;;;1028       }
;;;1029   
;;;1030       FMC_DISABLE_CFG_UPDATE();
;;;1031       return 0;
;;;1032   }
000022  e8bd8ff0          POP      {r4-r11,pc}
                  |L25.38|
000026  4638              MOV      r0,r7                 ;996
000028  f7fffffe          BL       FMC_Read
00002c  1c40              ADDS     r0,r0,#1              ;996
00002e  d125              BNE      |L25.124|
000030  481a              LDR      r0,|L25.156|
000032  f7fffffe          BL       FMC_Read
000036  1c40              ADDS     r0,r0,#1              ;996
000038  d120              BNE      |L25.124|
00003a  4818              LDR      r0,|L25.156|
00003c  1d00              ADDS     r0,r0,#4              ;997
00003e  f7fffffe          BL       FMC_Read
000042  f24a51a6          MOV      r1,#0xa5a6            ;997
000046  42c8              CMN      r0,r1                 ;997
000048  d118              BNE      |L25.124|
00004a  4815              LDR      r0,|L25.160|
00004c  6801              LDR      r1,[r0,#0]            ;1003  ; g_FMC_i32ErrCode
00004e  b9a9              CBNZ     r1,|L25.124|
000050  2400              MOVS     r4,#0                 ;1009
000052  46b9              MOV      r9,r7                 ;993
000054  4682              MOV      r10,r0                ;1003
000056  e017              B        |L25.136|
                  |L25.88|
000058  eb090084          ADD      r0,r9,r4,LSL #2       ;1011
00005c  f8561024          LDR      r1,[r6,r4,LSL #2]     ;1011
000060  4607              MOV      r7,r0                 ;1011
000062  f7fffffe          BL       FMC_Write
000066  b948              CBNZ     r0,|L25.124|
000068  4638              MOV      r0,r7                 ;1011
00006a  f7fffffe          BL       FMC_Read
00006e  f8561024          LDR      r1,[r6,r4,LSL #2]     ;1017
000072  4288              CMP      r0,r1                 ;1017
000074  d102              BNE      |L25.124|
000076  f8da0000          LDR      r0,[r10,#0]           ;1023  ; g_FMC_i32ErrCode
00007a  b120              CBZ      r0,|L25.134|
                  |L25.124|
00007c  6828              LDR      r0,[r5,#0]            ;1025
00007e  f0200010          BIC      r0,r0,#0x10           ;1025
000082  6028              STR      r0,[r5,#0]            ;1025
000084  e7cc              B        |L25.32|
                  |L25.134|
000086  1c64              ADDS     r4,r4,#1              ;1026
                  |L25.136|
000088  4544              CMP      r4,r8                 ;1009
00008a  d3e5              BCC      |L25.88|
00008c  6828              LDR      r0,[r5,#0]            ;1030
00008e  f0200010          BIC      r0,r0,#0x10           ;1030
000092  6028              STR      r0,[r5,#0]            ;1030
000094  2000              MOVS     r0,#0                 ;1031
000096  e7c4              B        |L25.34|
;;;1033   
                          ENDP

                  |L25.152|
                          DCD      0x4000c000
                  |L25.156|
                          DCD      0x00300004
                  |L25.160|
                          DCD      ||.data||

                          AREA ||i.FMC_WriteMultiple||, CODE, READONLY, ALIGN=2

                  FMC_WriteMultiple PROC
;;;619      */
;;;620    int32_t FMC_WriteMultiple(uint32_t u32Addr, uint32_t pu32Buf[], uint32_t u32Len)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;621    {
000004  4607              MOV      r7,r0
;;;622        int   i, idx, retval = 0;
;;;623        int32_t  tout;
;;;624    
;;;625        g_FMC_i32ErrCode = 0;
000006  f8dfa134          LDR      r10,|L26.316|
00000a  2000              MOVS     r0,#0                 ;622
;;;626    
;;;627        if ((u32Addr >= FMC_APROM_END) || ((u32Addr % 8) != 0))
00000c  f5b72f00          CMP      r7,#0x80000
000010  f8ca0000          STR      r0,[r10,#0]  ; g_FMC_i32ErrCode
000014  d201              BCS      |L26.26|
000016  077b              LSLS     r3,r7,#29
000018  d002              BEQ      |L26.32|
                  |L26.26|
;;;628        {
;;;629            g_FMC_i32ErrCode = -2;
00001a  f06f0001          MVN      r0,#1
;;;630            return -2;
00001e  e081              B        |L26.292|
                  |L26.32|
;;;631        }
;;;632    
;;;633        u32Len = u32Len - (u32Len % 8);         /* u32Len must be multiple of 8. */
;;;634    
;;;635        idx = 0;
;;;636    
;;;637        while (u32Len >= 8)
;;;638        {
;;;639            FMC->ISPADDR = u32Addr;
;;;640            FMC->MPDAT0  = pu32Buf[idx++];
;;;641            FMC->MPDAT1  = pu32Buf[idx++];
;;;642            FMC->MPDAT2  = pu32Buf[idx++];
;;;643            FMC->MPDAT3  = pu32Buf[idx++];
;;;644            FMC->ISPCMD  = FMC_ISPCMD_PROGRAM_MUL;
;;;645            FMC->ISPTRG  = FMC_ISPTRG_ISPGO_Msk;
;;;646    
;;;647            for (i = 16; i < FMC_MULTI_WORD_PROG_LEN; )
;;;648            {
;;;649                tout = FMC_TIMEOUT_WRITE;
000020  4c47              LDR      r4,|L26.320|
000022  f0020307          AND      r3,r2,#7              ;633
000026  1ad3              SUBS     r3,r2,r3              ;633
000028  2200              MOVS     r2,#0                 ;635
;;;650                while ((tout-- > 0) && (FMC->MPSTS & (FMC_MPSTS_D0_Msk | FMC_MPSTS_D1_Msk))) {}
;;;651                if (tout <= 0)
;;;652                {
;;;653                    g_FMC_i32ErrCode = -1;
00002a  f04f3eff          MOV      lr,#0xffffffff
00002e  f44f7b00          MOV      r11,#0x200            ;647
000032  f04f090a          MOV      r9,#0xa               ;649
000036  f8df810c          LDR      r8,|L26.324|
00003a  6826              LDR      r6,[r4,#0]            ;637
00003c  e07a              B        |L26.308|
                  |L26.62|
00003e  f8c87004          STR      r7,[r8,#4]            ;639
000042  f8514022          LDR      r4,[r1,r2,LSL #2]     ;640
000046  f8c84080          STR      r4,[r8,#0x80]         ;640
00004a  1c52              ADDS     r2,r2,#1              ;640
00004c  f8514022          LDR      r4,[r1,r2,LSL #2]     ;641
000050  f8c84084          STR      r4,[r8,#0x84]         ;641
000054  1c52              ADDS     r2,r2,#1              ;641
000056  f8514022          LDR      r4,[r1,r2,LSL #2]     ;642
00005a  f8c84088          STR      r4,[r8,#0x88]         ;642
00005e  1c52              ADDS     r2,r2,#1              ;642
000060  f8514022          LDR      r4,[r1,r2,LSL #2]     ;643
000064  f8c8408c          STR      r4,[r8,#0x8c]         ;643
000068  2427              MOVS     r4,#0x27              ;644
00006a  f8c8400c          STR      r4,[r8,#0xc]          ;644
00006e  2401              MOVS     r4,#1                 ;645
000070  f8c84010          STR      r4,[r8,#0x10]         ;645
000074  2410              MOVS     r4,#0x10              ;647
000076  1c52              ADDS     r2,r2,#1              ;647
                  |L26.120|
000078  fbb6f5f9          UDIV     r5,r6,r9              ;649
00007c  006d              LSLS     r5,r5,#1              ;649
                  |L26.126|
00007e  f1b50c00          SUBS     r12,r5,#0             ;650
000082  f1a50501          SUB      r5,r5,#1              ;650
000086  dd04              BLE      |L26.146|
000088  f8d8c0c0          LDR      r12,[r8,#0xc0]        ;650
00008c  f01c0f30          TST      r12,#0x30             ;650
000090  d1f5              BNE      |L26.126|
                  |L26.146|
000092  2d00              CMP      r5,#0                 ;651
000094  dd45              BLE      |L26.290|
000096  3008              ADDS     r0,r0,#8              ;651
000098  3b08              SUBS     r3,r3,#8              ;651
;;;654                    return -1;
;;;655                }
;;;656    
;;;657                retval += 8;
;;;658                u32Len -= 8;
;;;659                if (u32Len < 8)
00009a  2b08              CMP      r3,#8
00009c  d344              BCC      |L26.296|
;;;660                {
;;;661                    return retval;
;;;662                }
;;;663    
;;;664                if (!(FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk))
00009e  f8d850c0          LDR      r5,[r8,#0xc0]
0000a2  07ed              LSLS     r5,r5,#31
0000a4  d042              BEQ      |L26.300|
;;;665                {
;;;666                    /* printf("    [WARNING] busy cleared after D0D1 cleared!\n"); */
;;;667                    i += 8;
;;;668                    break;
;;;669                }
;;;670    
;;;671                FMC->MPDAT0 = pu32Buf[idx++];
0000a6  f8515022          LDR      r5,[r1,r2,LSL #2]
0000aa  f8c85080          STR      r5,[r8,#0x80]
0000ae  1c52              ADDS     r2,r2,#1
;;;672                FMC->MPDAT1 = pu32Buf[idx++];
0000b0  f8515022          LDR      r5,[r1,r2,LSL #2]
0000b4  f8c85084          STR      r5,[r8,#0x84]
0000b8  1c52              ADDS     r2,r2,#1
;;;673    
;;;674                if (i == FMC_MULTI_WORD_PROG_LEN/4)
0000ba  2c80              CMP      r4,#0x80
0000bc  d034              BEQ      |L26.296|
;;;675                    break;           // done
;;;676    
;;;677                tout = FMC_TIMEOUT_WRITE;
0000be  fbb6f5f9          UDIV     r5,r6,r9
0000c2  006d              LSLS     r5,r5,#1
                  |L26.196|
;;;678                while ((tout-- > 0) && (FMC->MPSTS & (FMC_MPSTS_D2_Msk | FMC_MPSTS_D3_Msk))) {}
0000c4  f1b50c00          SUBS     r12,r5,#0
0000c8  f1a50501          SUB      r5,r5,#1
0000cc  dd04              BLE      |L26.216|
0000ce  f8d8c0c0          LDR      r12,[r8,#0xc0]
0000d2  f01c0fc0          TST      r12,#0xc0
0000d6  d1f5              BNE      |L26.196|
                  |L26.216|
;;;679                if (tout <= 0)
0000d8  2d00              CMP      r5,#0
0000da  dd22              BLE      |L26.290|
0000dc  3008              ADDS     r0,r0,#8
0000de  3b08              SUBS     r3,r3,#8
;;;680                {
;;;681                    g_FMC_i32ErrCode = -1;
;;;682                    return -1;
;;;683                }
;;;684    
;;;685                retval += 8;
;;;686                u32Len -= 8;
;;;687                if (u32Len < 8)
0000e0  2b08              CMP      r3,#8
0000e2  d321              BCC      |L26.296|
;;;688                {
;;;689                    return retval;
;;;690                }
;;;691    
;;;692                if (!(FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk))
0000e4  f8d850c0          LDR      r5,[r8,#0xc0]
0000e8  07ed              LSLS     r5,r5,#31
0000ea  d01f              BEQ      |L26.300|
;;;693                {
;;;694                    /* printf("    [WARNING] busy cleared after D2D3 cleared!\n"); */
;;;695                    i += 8;
;;;696                    break;
;;;697                }
;;;698    
;;;699                FMC->MPDAT2 = pu32Buf[idx++];
0000ec  f8515022          LDR      r5,[r1,r2,LSL #2]
0000f0  f8c85088          STR      r5,[r8,#0x88]
0000f4  1c52              ADDS     r2,r2,#1
;;;700                FMC->MPDAT3 = pu32Buf[idx++];
0000f6  f8515022          LDR      r5,[r1,r2,LSL #2]
0000fa  f8c8508c          STR      r5,[r8,#0x8c]
0000fe  1c52              ADDS     r2,r2,#1
000100  455c              CMP      r4,r11                ;647
000102  dbb9              BLT      |L26.120|
                  |L26.260|
;;;701            }
;;;702    
;;;703            if (i != FMC_MULTI_WORD_PROG_LEN)
000104  455c              CMP      r4,r11
000106  d10f              BNE      |L26.296|
;;;704            {
;;;705                /* printf("    [WARNING] Multi-word program interrupted at 0x%x !!\n", i); */
;;;706                return retval;
;;;707            }
;;;708    
;;;709            tout = FMC_TIMEOUT_WRITE;
000108  fbb6f4f9          UDIV     r4,r6,r9
00010c  0064              LSLS     r4,r4,#1
                  |L26.270|
;;;710            while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
00010e  1e25              SUBS     r5,r4,#0
000110  f1a40401          SUB      r4,r4,#1
000114  dd03              BLE      |L26.286|
000116  f8d850c0          LDR      r5,[r8,#0xc0]
00011a  07ed              LSLS     r5,r5,#31
00011c  d1f7              BNE      |L26.270|
                  |L26.286|
;;;711            if (tout <= 0)
00011e  2c00              CMP      r4,#0
000120  dc06              BGT      |L26.304|
                  |L26.290|
;;;712            {
;;;713                g_FMC_i32ErrCode = -1;
000122  4670              MOV      r0,lr
                  |L26.292|
000124  f8ca0000          STR      r0,[r10,#0]  ; g_FMC_i32ErrCode
                  |L26.296|
;;;714                return -1;
;;;715            }
;;;716    
;;;717            u32Addr += FMC_MULTI_WORD_PROG_LEN;
;;;718        }
;;;719        return retval;
;;;720    }
000128  e8bd8ff0          POP      {r4-r11,pc}
                  |L26.300|
00012c  3408              ADDS     r4,r4,#8
00012e  e7e9              B        |L26.260|
                  |L26.304|
000130  f5077700          ADD      r7,r7,#0x200          ;668
                  |L26.308|
000134  2b08              CMP      r3,#8                 ;637
000136  d282              BCS      |L26.62|
000138  e7f6              B        |L26.296|
;;;721    
                          ENDP

00013a  0000              DCW      0x0000
                  |L26.316|
                          DCD      ||.data||
                  |L26.320|
                          DCD      SystemCoreClock
                  |L26.324|
                          DCD      0x4000c000

                          AREA ||i.FMC_Write_OTP||, CODE, READONLY, ALIGN=2

                  FMC_Write_OTP PROC
;;;735      */
;;;736    int32_t FMC_Write_OTP(uint32_t otp_num, uint32_t low_word, uint32_t high_word)
000000  b5f0              PUSH     {r4-r7,lr}
;;;737    {
;;;738        int32_t  tout;
;;;739    
;;;740        g_FMC_i32ErrCode = 0;
000002  4b26              LDR      r3,|L27.156|
000004  2400              MOVS     r4,#0
;;;741    
;;;742        if (otp_num > 255UL)
000006  28ff              CMP      r0,#0xff
000008  601c              STR      r4,[r3,#0]  ; g_FMC_i32ErrCode
00000a  d901              BLS      |L27.16|
;;;743        {
;;;744            g_FMC_i32ErrCode = -2;
00000c  1ea0              SUBS     r0,r4,#2
;;;745            return -2;
00000e  e03d              B        |L27.140|
                  |L27.16|
;;;746        }
;;;747    
;;;748        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000010  4d23              LDR      r5,|L27.160|
000012  2721              MOVS     r7,#0x21
000014  60ef              STR      r7,[r5,#0xc]
;;;749        FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL;
000016  f44f1444          MOV      r4,#0x310000
00001a  eb0404c0          ADD      r4,r4,r0,LSL #3
00001e  606c              STR      r4,[r5,#4]
;;;750        FMC->ISPDAT = low_word;
000020  60a9              STR      r1,[r5,#8]
;;;751        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
000022  f04f0c01          MOV      r12,#1
000026  f8c5c010          STR      r12,[r5,#0x10]
;;;752    
;;;753        tout = FMC_TIMEOUT_WRITE;
00002a  491e              LDR      r1,|L27.164|
00002c  f04f0e0a          MOV      lr,#0xa
000030  680e              LDR      r6,[r1,#0]  ; SystemCoreClock
000032  fbb6f1fe          UDIV     r1,r6,lr
000036  0049              LSLS     r1,r1,#1
                  |L27.56|
;;;754        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000038  1e0c              SUBS     r4,r1,#0
00003a  f1a10101          SUB      r1,r1,#1
00003e  dd03              BLE      |L27.72|
000040  f8d540c0          LDR      r4,[r5,#0xc0]
000044  07e4              LSLS     r4,r4,#31
000046  d1f7              BNE      |L27.56|
                  |L27.72|
;;;755        if (tout <= 0)
;;;756        {
;;;757            g_FMC_i32ErrCode = -1;
000048  f04f34ff          MOV      r4,#0xffffffff
00004c  2900              CMP      r1,#0                 ;755
00004e  dd1c              BLE      |L27.138|
;;;758            return -1;
;;;759        }
;;;760    
;;;761        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
000050  6c29              LDR      r1,[r5,#0x40]
000052  0649              LSLS     r1,r1,#25
000054  d504              BPL      |L27.96|
                  |L27.86|
;;;762        {
;;;763            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
000056  6c28              LDR      r0,[r5,#0x40]
000058  f0400040          ORR      r0,r0,#0x40
00005c  6428              STR      r0,[r5,#0x40]
;;;764            g_FMC_i32ErrCode = -1;
;;;765            return -1;
00005e  e014              B        |L27.138|
                  |L27.96|
;;;766        }
;;;767    
;;;768        FMC->ISPCMD = FMC_ISPCMD_PROGRAM;
000060  60ef              STR      r7,[r5,#0xc]
;;;769        FMC->ISPADDR = FMC_OTP_BASE + otp_num * 8UL + 4UL;
000062  4911              LDR      r1,|L27.168|
000064  eb0100c0          ADD      r0,r1,r0,LSL #3
000068  6068              STR      r0,[r5,#4]
;;;770        FMC->ISPDAT = high_word;
00006a  60aa              STR      r2,[r5,#8]
;;;771        FMC->ISPTRG = FMC_ISPTRG_ISPGO_Msk;
00006c  f8c5c010          STR      r12,[r5,#0x10]
;;;772    
;;;773        tout = FMC_TIMEOUT_WRITE;
000070  fbb6f0fe          UDIV     r0,r6,lr
000074  0040              LSLS     r0,r0,#1
                  |L27.118|
;;;774        while ((tout-- > 0) && (FMC->MPSTS & FMC_MPSTS_MPBUSY_Msk)) {}
000076  1e01              SUBS     r1,r0,#0
000078  f1a00001          SUB      r0,r0,#1
00007c  dd03              BLE      |L27.134|
00007e  f8d510c0          LDR      r1,[r5,#0xc0]
000082  07c9              LSLS     r1,r1,#31
000084  d1f7              BNE      |L27.118|
                  |L27.134|
;;;775        if (tout <= 0)
000086  2800              CMP      r0,#0
000088  dc02              BGT      |L27.144|
                  |L27.138|
;;;776        {
;;;777            g_FMC_i32ErrCode = -1;
00008a  4620              MOV      r0,r4
                  |L27.140|
00008c  6018              STR      r0,[r3,#0]  ; g_FMC_i32ErrCode
;;;778            return -1;
;;;779        }
;;;780    
;;;781        if (FMC->ISPSTS & FMC_ISPSTS_ISPFF_Msk)
;;;782        {
;;;783            FMC->ISPSTS |= FMC_ISPSTS_ISPFF_Msk;
;;;784            g_FMC_i32ErrCode = -1;
;;;785            return -1;
;;;786        }
;;;787        return 0;
;;;788    }
00008e  bdf0              POP      {r4-r7,pc}
                  |L27.144|
000090  6c28              LDR      r0,[r5,#0x40]         ;781
000092  0640              LSLS     r0,r0,#25             ;781
000094  d4df              BMI      |L27.86|
000096  2000              MOVS     r0,#0                 ;787
000098  bdf0              POP      {r4-r7,pc}
;;;789    
                          ENDP

00009a  0000              DCW      0x0000
                  |L27.156|
                          DCD      ||.data||
                  |L27.160|
                          DCD      0x4000c000
                  |L27.164|
                          DCD      SystemCoreClock
                  |L27.168|
                          DCD      0x00310004

                          AREA ||.data||, DATA, ALIGN=2

                  g_FMC_i32ErrCode
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\Library\\StdDriver\\src\\fmc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REV16|
#line 388 "..\\..\\..\\Library\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_fmc_c_65c03504____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____REVSH|
#line 402
|__asm___5_fmc_c_65c03504____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_fmc_c_65c03504____RRX|
#line 587
|__asm___5_fmc_c_65c03504____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
